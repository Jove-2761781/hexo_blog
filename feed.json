{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo",
    "subtitle": "随缘更新",
    "icon": "https://jove-2761781.github.io/hexo_blog/images/favicon.ico",
    "description": null,
    "home_page_url": "https://jove-2761781.github.io/hexo_blog",
    "items": [
        {
            "id": "https://jove-2761781.github.io/hexo_blog/docker/oracle%20image%20overview/",
            "url": "https://jove-2761781.github.io/hexo_blog/docker/oracle%20image%20overview/",
            "title": "Oracle Image Overview",
            "date_published": "2023-02-14T08:54:20.335Z",
            "content_html": "<h4 id=\"default-setting\"><a class=\"anchor\" href=\"#default-setting\">#</a> Default setting</h4>\n<p>Database located in  <code>/u01/app/oracle</code>  folder</p>\n<p><strong>OS users:</strong><br />\nroot/welcome<br />\noracle/oracle</p>\n<p><strong>DB users:</strong><br />\nsys/oacle<br />\nsystem/oracle</p>\n<p><strong>ENV:</strong><br />\nORACLE_SID=orcl<br />\nCHARACTERSET=ZHS16GBK</p>\n<h4 id=\"start-a-oracle-server-instance\"><a class=\"anchor\" href=\"#start-a-oracle-server-instance\">#</a> Start a  <code>oracle</code>  server instance</h4>\n<p>Starting a Oracle 11g instance is simple:</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">--privileged</span> <span class=\"token parameter variable\">--name</span> oracle-11g <span class=\"token parameter variable\">-p</span> <span class=\"token number\">15210</span>:1521 <span class=\"token parameter variable\">-v</span> /unzipped-database-folder:/install oracle:tag</pre></td></tr></table></figure><h4 id=\"using-database-datapump\"><a class=\"anchor\" href=\"#using-database-datapump\">#</a> Using database datapump</h4>\n<p>Optionally you can map dpdump folder to easy upload dumps:</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">--privileged</span> <span class=\"token parameter variable\">--name</span> oracle-11g <span class=\"token parameter variable\">-p</span> <span class=\"token number\">15210</span>:1521 <span class=\"token parameter variable\">-v</span> /unzipped-database-folder:/install <span class=\"token parameter variable\">-v</span> /datapump-folder:/datapump oracle:tag</pre></td></tr></table></figure><p>To execute expdp/impdp just use docker exec command:</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-i</span> oracle-11g expdp <span class=\"token punctuation\">..</span>.</pre></td></tr></table></figure><p>For more information, please visit <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0pvdmUtMjc2MTc4MS9kb2NrZXItaW1hZ2VzL3RyZWUvbWFpbi9vcmFjbGUvMTEuMi4wLjQ=\">Quick reference</span></p>\n",
            "tags": [
                "Docker",
                "image",
                "ref"
            ]
        },
        {
            "id": "https://jove-2761781.github.io/hexo_blog/docker/configuration/",
            "url": "https://jove-2761781.github.io/hexo_blog/docker/configuration/",
            "title": "Configuration",
            "date_published": "2023-02-07T12:11:57.576Z",
            "content_html": "<h4 id=\"restart-policy\"><a class=\"anchor\" href=\"#restart-policy\">#</a> Restart Policy</h4>\n<p>To configure the restart policy for a container, use the  <code>--restart</code>  flag when using the  <code>docker run</code>  command. The value of the  <code>--restart</code>  flag can be any of the following:</p>\n<table>\n<thead>\n<tr>\n<th>Flag</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>no</code></td>\n<td>Do not automatically restart the container. (the default)</td>\n</tr>\n<tr>\n<td><code>on-failure[:max-retries]</code></td>\n<td>Restart the container if it exits due to an error, which manifests as a non-zero exit code. Optionally, limit the number of times the Docker daemon attempts to restart the container using the  <code>:max-retries</code>  option.</td>\n</tr>\n<tr>\n<td><code>always</code></td>\n<td>Always restart the container if it stops. If it is manually stopped, it is restarted only when Docker daemon restarts or the container itself is manually restarted. (See the second bullet listed in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vY29uZmlnL2NvbnRhaW5lcnMvc3RhcnQtY29udGFpbmVycy1hdXRvbWF0aWNhbGx5LyNyZXN0YXJ0LXBvbGljeS1kZXRhaWxz\">restart policy details</span>)</td>\n</tr>\n<tr>\n<td><code>unless-stopped</code></td>\n<td>Similar to  <code>always</code> , except that when the container is stopped (manually or otherwise), it is not restarted even after Docker daemon restarts.</td>\n</tr>\n</tbody>\n</table>\n<p>The following example starts a Redis container and configures it to always restart unless it is explicitly stopped or Docker is restarted.</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--restart</span> unless-stopped redis</pre></td></tr></table></figure><p>This command changes the restart policy for an already running container named  <code>redis</code> .</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> update <span class=\"token parameter variable\">--restart</span> unless-stopped redis</pre></td></tr></table></figure><p>And this command will ensure all currently running containers will be restarted unless stopped.</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> update <span class=\"token parameter variable\">--restart</span> unless-stopped <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">docker</span> <span class=\"token function\">ps</span> <span class=\"token parameter variable\">-q</span><span class=\"token variable\">)</span></span></pre></td></tr></table></figure>",
            "tags": [
                "Docker",
                "config"
            ]
        },
        {
            "id": "https://jove-2761781.github.io/hexo_blog/virtualization/wsl/",
            "url": "https://jove-2761781.github.io/hexo_blog/virtualization/wsl/",
            "title": "WSL",
            "date_published": "2023-02-06T15:47:00.589Z",
            "content_html": "<h1 id=\"wsl\"><a class=\"anchor\" href=\"#wsl\">#</a> WSL</h1>\n<h4 id=\"systemd-support\"><a class=\"anchor\" href=\"#systemd-support\">#</a> Systemd support</h4>\n<p>To enable systemd, open your  <code>wsl.conf</code>  file in a text editor using  <code>sudo</code>  for admin permissions and add these lines to the  <code>/etc/wsl.conf</code> :</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"[boot]<span class=\"token entity\" title=\"\\n\">\\n</span>systemd=true\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> <span class=\"token parameter variable\">-a</span> /etc/wsl.conf</pre></td></tr></table></figure><h4 id=\"open-file-with-explorerexe\"><a class=\"anchor\" href=\"#open-file-with-explorerexe\">#</a> Open file with explorer.exe</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function-name function\">open</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token assign-left variable\">wp</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>wslpath <span class=\"token parameter variable\">-w</span> <span class=\"token string\">\"<span class=\"token variable\">$1</span>\"</span><span class=\"token variable\">)</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    explorer.exe <span class=\"token string\">\"<span class=\"token variable\">$wp</span>\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Virtualization",
                "wsl"
            ]
        },
        {
            "id": "https://jove-2761781.github.io/hexo_blog/virtualization/qemu/",
            "url": "https://jove-2761781.github.io/hexo_blog/virtualization/qemu/",
            "title": "Qemu",
            "date_published": "2023-02-06T15:47:00.587Z",
            "content_html": "<h1 id=\"qemu\"><a class=\"anchor\" href=\"#qemu\">#</a> Qemu</h1>\n<h4 id=\"aix-72\"><a class=\"anchor\" href=\"#aix-72\">#</a> AIX 7.2</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>qemu-img create <span class=\"token parameter variable\">-f</span> qcow2 hdisk0.qcow2 20G</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>qemu-system-ppc64 <span class=\"token parameter variable\">-cpu</span> POWER8 <span class=\"token parameter variable\">-machine</span> pseries <span class=\"token parameter variable\">-m</span> <span class=\"token number\">4096</span> <span class=\"token parameter variable\">-serial</span> stdio <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token parameter variable\">-drive</span> <span class=\"token assign-left variable\">file</span><span class=\"token operator\">=</span>hdisk0.qcow2,if<span class=\"token operator\">=</span>none,id<span class=\"token operator\">=</span>drive-virtio-disk0 <span class=\"token parameter variable\">-device</span> virtio-scsi-pci,id<span class=\"token operator\">=</span>scsi <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token parameter variable\">-device</span> scsi-hd,drive<span class=\"token operator\">=</span>drive-virtio-disk0 <span class=\"token parameter variable\">-cdrom</span> AIX_v7.2_Install_7200-03-03-1913_DVD_1_of_2_052019.iso <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-prom-env <span class=\"token string\">\"boot-command=boot cdrom:\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>qemu-system-ppc64 <span class=\"token parameter variable\">-cpu</span> POWER8 <span class=\"token parameter variable\">-machine</span> pseries <span class=\"token parameter variable\">-m</span> <span class=\"token number\">4096</span> <span class=\"token parameter variable\">-serial</span> stdio <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token parameter variable\">-drive</span> <span class=\"token assign-left variable\">file</span><span class=\"token operator\">=</span>hdisk0.qcow2,if<span class=\"token operator\">=</span>none,id<span class=\"token operator\">=</span>drive-virtio-disk0 <span class=\"token parameter variable\">-device</span> virtio-scsi-pci,id<span class=\"token operator\">=</span>scsi <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token parameter variable\">-device</span> scsi-hd,drive<span class=\"token operator\">=</span>drive-virtio-disk0 <span class=\"token parameter variable\">-cdrom</span> AIX_v7.2_Install_7200-03-03-1913_DVD_1_of_2_052019.iso <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>-prom-env <span class=\"token string\">\"boot-command=boot disk:\"</span></pre></td></tr></table></figure>",
            "tags": [
                "Virtualization",
                "qemu"
            ]
        },
        {
            "id": "https://jove-2761781.github.io/hexo_blog/database/sqlserver/sp_help_revlogin/",
            "url": "https://jove-2761781.github.io/hexo_blog/database/sqlserver/sp_help_revlogin/",
            "title": "sp_help_revlogin",
            "date_published": "2023-02-06T15:47:00.583Z",
            "content_html": "<h1 id=\"sp_help_revlogin\"><a class=\"anchor\" href=\"#sp_help_revlogin\">#</a> sp_help_revlogin</h1>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">USE</span> master</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>GO</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">IF</span> OBJECT_ID <span class=\"token punctuation\">(</span><span class=\"token string\">'sp_hexadecimal'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">IS</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">DROP</span> <span class=\"token keyword\">PROCEDURE</span> sp_hexadecimal</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>GO</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> sp_hexadecimal</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token variable\">@binvalue</span> <span class=\"token keyword\">varbinary</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token variable\">@hexvalue</span> <span class=\"token keyword\">varchar</span> <span class=\"token punctuation\">(</span><span class=\"token number\">514</span><span class=\"token punctuation\">)</span> OUTPUT</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">AS</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@charvalue</span> <span class=\"token keyword\">varchar</span> <span class=\"token punctuation\">(</span><span class=\"token number\">514</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@i</span> <span class=\"token keyword\">int</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@length</span> <span class=\"token keyword\">int</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@hexstring</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@charvalue</span> <span class=\"token operator\">=</span> <span class=\"token string\">'0x'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@i</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@length</span> <span class=\"token operator\">=</span> DATALENGTH <span class=\"token punctuation\">(</span><span class=\"token variable\">@binvalue</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@hexstring</span> <span class=\"token operator\">=</span> <span class=\"token string\">'0123456789ABCDEF'</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">WHILE</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">@i</span> <span class=\"token operator\">&lt;=</span> <span class=\"token variable\">@length</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@tempint</span> <span class=\"token keyword\">int</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@firstint</span> <span class=\"token keyword\">int</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@secondint</span> <span class=\"token keyword\">int</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@tempint</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">CONVERT</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> SUBSTRING<span class=\"token punctuation\">(</span><span class=\"token variable\">@binvalue</span><span class=\"token punctuation\">,</span><span class=\"token variable\">@i</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@firstint</span> <span class=\"token operator\">=</span> FLOOR<span class=\"token punctuation\">(</span><span class=\"token variable\">@tempint</span><span class=\"token operator\">/</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@secondint</span> <span class=\"token operator\">=</span> <span class=\"token variable\">@tempint</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">@firstint</span><span class=\"token operator\">*</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@charvalue</span> <span class=\"token operator\">=</span> <span class=\"token variable\">@charvalue</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    SUBSTRING<span class=\"token punctuation\">(</span><span class=\"token variable\">@hexstring</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@firstint</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    SUBSTRING<span class=\"token punctuation\">(</span><span class=\"token variable\">@hexstring</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@secondint</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@i</span> <span class=\"token operator\">=</span> <span class=\"token variable\">@i</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">END</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@hexvalue</span> <span class=\"token operator\">=</span> <span class=\"token variable\">@charvalue</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>GO</pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">IF</span> OBJECT_ID <span class=\"token punctuation\">(</span><span class=\"token string\">'sp_help_revlogin'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">IS</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token keyword\">DROP</span> <span class=\"token keyword\">PROCEDURE</span> sp_help_revlogin</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>GO</pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> sp_help_revlogin <span class=\"token variable\">@login_name</span> sysname <span class=\"token operator\">=</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AS</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@name</span> sysname</pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@type</span> <span class=\"token keyword\">varchar</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@hasaccess</span> <span class=\"token keyword\">int</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@denylogin</span> <span class=\"token keyword\">int</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@is_disabled</span> <span class=\"token keyword\">int</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@PWD_varbinary</span>  <span class=\"token keyword\">varbinary</span> <span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@PWD_string</span>  <span class=\"token keyword\">varchar</span> <span class=\"token punctuation\">(</span><span class=\"token number\">514</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@SID_varbinary</span> <span class=\"token keyword\">varbinary</span> <span class=\"token punctuation\">(</span><span class=\"token number\">85</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@SID_string</span> <span class=\"token keyword\">varchar</span> <span class=\"token punctuation\">(</span><span class=\"token number\">514</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@tmpstr</span>  <span class=\"token keyword\">varchar</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@is_policy_checked</span> <span class=\"token keyword\">varchar</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@is_expiration_checked</span> <span class=\"token keyword\">varchar</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@defaultdb</span> sysname</pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token keyword\">IF</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">@login_name</span> <span class=\"token operator\">IS</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token keyword\">DECLARE</span> login_curs <span class=\"token keyword\">CURSOR</span> <span class=\"token keyword\">FOR</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token keyword\">SELECT</span> p<span class=\"token punctuation\">.</span>sid<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>is_disabled<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>default_database_name<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">.</span>hasaccess<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">.</span>denylogin <span class=\"token keyword\">FROM</span> </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>sys<span class=\"token punctuation\">.</span>server_principals p <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> sys<span class=\"token punctuation\">.</span>syslogins l</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token keyword\">ON</span> <span class=\"token punctuation\">(</span> l<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">)</span> <span class=\"token keyword\">WHERE</span> p<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'S'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'U'</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">AND</span> p<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;></span> <span class=\"token string\">'sa'</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">ELSE</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token keyword\">DECLARE</span> login_curs <span class=\"token keyword\">CURSOR</span> <span class=\"token keyword\">FOR</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>      <span class=\"token keyword\">SELECT</span> p<span class=\"token punctuation\">.</span>sid<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>is_disabled<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>default_database_name<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">.</span>hasaccess<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">.</span>denylogin <span class=\"token keyword\">FROM</span> </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>sys<span class=\"token punctuation\">.</span>server_principals p <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> sys<span class=\"token punctuation\">.</span>syslogins l</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      <span class=\"token keyword\">ON</span> <span class=\"token punctuation\">(</span> l<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">)</span> <span class=\"token keyword\">WHERE</span> p<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'S'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'U'</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">AND</span> p<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token variable\">@login_name</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">OPEN</span> login_curs</pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">FETCH</span> <span class=\"token keyword\">NEXT</span> <span class=\"token keyword\">FROM</span> login_curs <span class=\"token keyword\">INTO</span> <span class=\"token variable\">@SID_varbinary</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@name</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@type</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@is_disabled</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@defaultdb</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@hasaccess</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@denylogin</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token keyword\">IF</span> <span class=\"token punctuation\">(</span>@<span class=\"token variable\">@fetch_status</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token keyword\">PRINT</span> <span class=\"token string\">'No login(s) found.'</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token keyword\">CLOSE</span> login_curs</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token keyword\">DEALLOCATE</span> login_curs</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token keyword\">RETURN</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token keyword\">END</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token keyword\">SET</span> <span class=\"token variable\">@tmpstr</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/* sp_help_revlogin script '</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token keyword\">PRINT</span> <span class=\"token variable\">@tmpstr</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token keyword\">SET</span> <span class=\"token variable\">@tmpstr</span> <span class=\"token operator\">=</span> <span class=\"token string\">'** Generated '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">CONVERT</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">varchar</span><span class=\"token punctuation\">,</span> GETDATE<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">' on '</span> <span class=\"token operator\">+</span> @<span class=\"token variable\">@SERVERNAME</span> <span class=\"token operator\">+</span> <span class=\"token string\">' */'</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token keyword\">PRINT</span> <span class=\"token variable\">@tmpstr</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token keyword\">PRINT</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token keyword\">WHILE</span> <span class=\"token punctuation\">(</span>@<span class=\"token variable\">@fetch_status</span> <span class=\"token operator\">&lt;></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>  <span class=\"token keyword\">IF</span> <span class=\"token punctuation\">(</span>@<span class=\"token variable\">@fetch_status</span> <span class=\"token operator\">&lt;></span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">PRINT</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">SET</span> <span class=\"token variable\">@tmpstr</span> <span class=\"token operator\">=</span> <span class=\"token string\">'-- Login: '</span> <span class=\"token operator\">+</span> <span class=\"token variable\">@name</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">PRINT</span> <span class=\"token variable\">@tmpstr</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token keyword\">IF</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">@type</span> <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'U'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">BEGIN</span> <span class=\"token comment\">-- NT authenticated account/group</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>      <span class=\"token keyword\">SET</span> <span class=\"token variable\">@tmpstr</span> <span class=\"token operator\">=</span> <span class=\"token string\">'CREATE LOGIN '</span> <span class=\"token operator\">+</span> QUOTENAME<span class=\"token punctuation\">(</span> <span class=\"token variable\">@name</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">' FROM WINDOWS WITH DEFAULT_DATABASE = ['</span> <span class=\"token operator\">+</span> <span class=\"token variable\">@defaultdb</span> <span class=\"token operator\">+</span> <span class=\"token string\">']'</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">END</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token keyword\">ELSE</span> <span class=\"token keyword\">BEGIN</span> <span class=\"token comment\">-- SQL Server authentication</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token comment\">-- obtain password and sid</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token keyword\">SET</span> <span class=\"token variable\">@PWD_varbinary</span> <span class=\"token operator\">=</span> CAST<span class=\"token punctuation\">(</span> LOGINPROPERTY<span class=\"token punctuation\">(</span> <span class=\"token variable\">@name</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'PasswordHash'</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> <span class=\"token keyword\">varbinary</span> <span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token keyword\">EXEC</span> sp_hexadecimal <span class=\"token variable\">@PWD_varbinary</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@PWD_string</span> <span class=\"token keyword\">OUT</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token keyword\">EXEC</span> sp_hexadecimal <span class=\"token variable\">@SID_varbinary</span><span class=\"token punctuation\">,</span><span class=\"token variable\">@SID_string</span> <span class=\"token keyword\">OUT</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token comment\">-- obtain password policy state</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@is_policy_checked</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">CASE</span> is_policy_checked <span class=\"token keyword\">WHEN</span> <span class=\"token number\">1</span> <span class=\"token keyword\">THEN</span> <span class=\"token string\">'ON'</span> <span class=\"token keyword\">WHEN</span> <span class=\"token number\">0</span> <span class=\"token keyword\">THEN</span> <span class=\"token string\">'OFF'</span> <span class=\"token keyword\">ELSE</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">END</span> <span class=\"token keyword\">FROM</span> sys<span class=\"token punctuation\">.</span>sql_logins <span class=\"token keyword\">WHERE</span> name <span class=\"token operator\">=</span> <span class=\"token variable\">@name</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@is_expiration_checked</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">CASE</span> is_expiration_checked <span class=\"token keyword\">WHEN</span> <span class=\"token number\">1</span> <span class=\"token keyword\">THEN</span> <span class=\"token string\">'ON'</span> <span class=\"token keyword\">WHEN</span> <span class=\"token number\">0</span> <span class=\"token keyword\">THEN</span> <span class=\"token string\">'OFF'</span> <span class=\"token keyword\">ELSE</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">END</span> <span class=\"token keyword\">FROM</span> sys<span class=\"token punctuation\">.</span>sql_logins <span class=\"token keyword\">WHERE</span> name <span class=\"token operator\">=</span> <span class=\"token variable\">@name</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token keyword\">SET</span> <span class=\"token variable\">@tmpstr</span> <span class=\"token operator\">=</span> <span class=\"token string\">'CREATE LOGIN '</span> <span class=\"token operator\">+</span> QUOTENAME<span class=\"token punctuation\">(</span> <span class=\"token variable\">@name</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">' WITH PASSWORD = '</span> <span class=\"token operator\">+</span> <span class=\"token variable\">@PWD_string</span> <span class=\"token operator\">+</span> <span class=\"token string\">' HASHED, SID = '</span> <span class=\"token operator\">+</span> <span class=\"token variable\">@SID_string</span> <span class=\"token operator\">+</span> <span class=\"token string\">', DEFAULT_DATABASE = ['</span> <span class=\"token operator\">+</span> <span class=\"token variable\">@defaultdb</span> <span class=\"token operator\">+</span> <span class=\"token string\">']'</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token keyword\">IF</span> <span class=\"token punctuation\">(</span> <span class=\"token variable\">@is_policy_checked</span> <span class=\"token operator\">IS</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>          <span class=\"token keyword\">SET</span> <span class=\"token variable\">@tmpstr</span> <span class=\"token operator\">=</span> <span class=\"token variable\">@tmpstr</span> <span class=\"token operator\">+</span> <span class=\"token string\">', CHECK_POLICY = '</span> <span class=\"token operator\">+</span> <span class=\"token variable\">@is_policy_checked</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token keyword\">END</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token keyword\">IF</span> <span class=\"token punctuation\">(</span> <span class=\"token variable\">@is_expiration_checked</span> <span class=\"token operator\">IS</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>          <span class=\"token keyword\">SET</span> <span class=\"token variable\">@tmpstr</span> <span class=\"token operator\">=</span> <span class=\"token variable\">@tmpstr</span> <span class=\"token operator\">+</span> <span class=\"token string\">', CHECK_EXPIRATION = '</span> <span class=\"token operator\">+</span> <span class=\"token variable\">@is_expiration_checked</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token keyword\">END</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token keyword\">END</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token keyword\">IF</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">@denylogin</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token keyword\">BEGIN</span> <span class=\"token comment\">-- login is denied access</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>      <span class=\"token keyword\">SET</span> <span class=\"token variable\">@tmpstr</span> <span class=\"token operator\">=</span> <span class=\"token variable\">@tmpstr</span> <span class=\"token operator\">+</span> <span class=\"token string\">'; DENY CONNECT SQL TO '</span> <span class=\"token operator\">+</span> QUOTENAME<span class=\"token punctuation\">(</span> <span class=\"token variable\">@name</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token keyword\">END</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token keyword\">ELSE</span> <span class=\"token keyword\">IF</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">@hasaccess</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token keyword\">BEGIN</span> <span class=\"token comment\">-- login exists but does not have access</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>      <span class=\"token keyword\">SET</span> <span class=\"token variable\">@tmpstr</span> <span class=\"token operator\">=</span> <span class=\"token variable\">@tmpstr</span> <span class=\"token operator\">+</span> <span class=\"token string\">'; REVOKE CONNECT SQL TO '</span> <span class=\"token operator\">+</span> QUOTENAME<span class=\"token punctuation\">(</span> <span class=\"token variable\">@name</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token keyword\">END</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token keyword\">IF</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">@is_disabled</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token keyword\">BEGIN</span> <span class=\"token comment\">-- login is disabled</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>      <span class=\"token keyword\">SET</span> <span class=\"token variable\">@tmpstr</span> <span class=\"token operator\">=</span> <span class=\"token variable\">@tmpstr</span> <span class=\"token operator\">+</span> <span class=\"token string\">'; ALTER LOGIN '</span> <span class=\"token operator\">+</span> QUOTENAME<span class=\"token punctuation\">(</span> <span class=\"token variable\">@name</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">' DISABLE'</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token keyword\">END</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token keyword\">PRINT</span> <span class=\"token variable\">@tmpstr</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>  <span class=\"token keyword\">END</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>  <span class=\"token keyword\">FETCH</span> <span class=\"token keyword\">NEXT</span> <span class=\"token keyword\">FROM</span> login_curs <span class=\"token keyword\">INTO</span> <span class=\"token variable\">@SID_varbinary</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@name</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@type</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@is_disabled</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@defaultdb</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@hasaccess</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@denylogin</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>   <span class=\"token keyword\">END</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token keyword\">CLOSE</span> login_curs</pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token keyword\">DEALLOCATE</span> login_curs</pre></td></tr><tr><td data-num=\"122\"></td><td><pre><span class=\"token keyword\">RETURN</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>GO</pre></td></tr></table></figure><p>存储过程创建完成后执行</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">EXEC</span> sp_help_revlogin</pre></td></tr></table></figure><p>自动生成登录名权限脚本。</p>\n",
            "tags": [
                "Database",
                "SQLServer",
                "troubleshooting"
            ]
        },
        {
            "id": "https://jove-2761781.github.io/hexo_blog/database/sqlserver/orphaned%20users/",
            "url": "https://jove-2761781.github.io/hexo_blog/database/sqlserver/orphaned%20users/",
            "title": "orphaned users",
            "date_published": "2023-02-06T15:47:00.580Z",
            "content_html": "<h1 id=\"orphaned-users\"><a class=\"anchor\" href=\"#orphaned-users\">#</a> orphaned users</h1>\n<p>Step 1:  检测、查看对应的孤立账号</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">USE</span> <span class=\"token operator\">&lt;</span>DatabaseName<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>GO</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">EXEC</span> sp_change_users_login <span class=\"token variable\">@Action</span><span class=\"token operator\">=</span><span class=\"token string\">'Report'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>GO</pre></td></tr></table></figure><p>Step 2: 新建对应的登录名，例如上面检测到 Test 账号为孤立账号</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">USE</span> <span class=\"token punctuation\">[</span>master<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>GO</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">CREATE</span> LOGIN <span class=\"token punctuation\">[</span>Test<span class=\"token punctuation\">]</span> <span class=\"token keyword\">WITH</span> PASSWORD<span class=\"token operator\">=</span>N<span class=\"token string\">'Pa@#456'</span> MUST_CHANGE<span class=\"token punctuation\">,</span> DEFAULT_DATABASE<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>xxxx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> CHECK_EXPIRATION<span class=\"token operator\">=</span><span class=\"token keyword\">ON</span><span class=\"token punctuation\">,</span> CHECK_POLICY<span class=\"token operator\">=</span><span class=\"token keyword\">ON</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>GO</pre></td></tr></table></figure><p>Step 3:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">USE</span> EASN_EAP<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>GO</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">EXEC</span> sp_change_users_login <span class=\"token variable\">@Action</span><span class=\"token operator\">=</span><span class=\"token string\">'Update_one'</span><span class=\"token punctuation\">,</span><span class=\"token variable\">@UserNamePattern</span><span class=\"token operator\">=</span><span class=\"token string\">'xxxx'</span><span class=\"token punctuation\">,</span><span class=\"token variable\">@LoginName</span><span class=\"token operator\">=</span><span class=\"token string\">'xxxx'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>GO</pre></td></tr></table></figure>",
            "tags": [
                "Database",
                "SQLServer",
                "troubleshooting"
            ]
        },
        {
            "id": "https://jove-2761781.github.io/hexo_blog/database/sqlserver/backup%20restore/",
            "url": "https://jove-2761781.github.io/hexo_blog/database/sqlserver/backup%20restore/",
            "title": "Backup & Restore",
            "date_published": "2023-02-06T15:47:00.578Z",
            "content_html": "<h1 id=\"backup-restore\"><a class=\"anchor\" href=\"#backup-restore\">#</a> Backup &amp; Restore</h1>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--Full Backup</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">BACKUP</span> <span class=\"token keyword\">DATABASE</span> <span class=\"token punctuation\">[</span>zsyydb<span class=\"token punctuation\">]</span> <span class=\"token keyword\">TO</span> <span class=\"token keyword\">DISK</span><span class=\"token operator\">=</span>N<span class=\"token string\">'\\\\192.0.33.222\\Backup\\zsyydb.bak'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">WITH</span> NOFORMAT<span class=\"token punctuation\">,</span>NOINIT<span class=\"token punctuation\">,</span>NAME<span class=\"token operator\">=</span>N<span class=\"token string\">'zsyydb-full'</span><span class=\"token punctuation\">,</span>SKIP<span class=\"token punctuation\">,</span>NOREWIND<span class=\"token punctuation\">,</span>NOUNLOAD<span class=\"token punctuation\">,</span>STATS<span class=\"token operator\">=</span><span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>GO</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">--Full Restore</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">RESTORE</span> <span class=\"token keyword\">DATABASE</span> <span class=\"token punctuation\">[</span>zsyydb<span class=\"token punctuation\">]</span> <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">DISK</span><span class=\"token operator\">=</span>N<span class=\"token string\">'D:\\backup\\zsyydb.bak'</span> <span class=\"token keyword\">WITH</span> <span class=\"token keyword\">FILE</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">REPLACE</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>MOVE N<span class=\"token string\">'zsyydb'</span><span class=\"token keyword\">TO</span> N<span class=\"token string\">'D:\\Program Files\\Microsoft SQL Server\\MSSQL10_50.MSSQLSERVER\\MSSQL\\DATA\\zsyydb.mdf'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>MOVE N<span class=\"token string\">'HistoryData'</span><span class=\"token keyword\">TO</span> N<span class=\"token string\">'D:\\Program Files\\Microsoft SQL Server\\MSSQL10_50.MSSQLSERVER\\MSSQL\\DATA\\HistoryData.ndf'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>MOVE N<span class=\"token string\">'UnConfirm2013'</span><span class=\"token keyword\">TO</span> N<span class=\"token string\">'D:\\Program Files\\Microsoft SQL Server\\MSSQL10_50.MSSQLSERVER\\MSSQL\\DATA\\UnConfirm2013.ndf'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>MOVE N<span class=\"token string\">'zsyylog'</span><span class=\"token keyword\">TO</span> N<span class=\"token string\">'T:\\MSSQL10_50.MSSQLSERVER\\MSSQL\\LOG\\zsyydb.ldf'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>MOVE N<span class=\"token string\">'zsyylog_1'</span><span class=\"token keyword\">TO</span> N<span class=\"token string\">'T:\\MSSQL10_50.MSSQLSERVER\\MSSQL\\LOG\\zsyydb1.ldf'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>NORECOVERY<span class=\"token punctuation\">,</span>NOUNLOAD<span class=\"token punctuation\">,</span>STATS<span class=\"token operator\">=</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>GO</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">--Disable Port 1433, Diff Backup</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">BACKUP</span> <span class=\"token keyword\">DATABASE</span> <span class=\"token punctuation\">[</span>zsyydb<span class=\"token punctuation\">]</span> <span class=\"token keyword\">TO</span> <span class=\"token keyword\">DISK</span><span class=\"token operator\">=</span>N<span class=\"token string\">'\\\\192.0.33.222\\Backup\\zsyydb01.bak'</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">WITH</span> DIFFERENTIAL<span class=\"token punctuation\">,</span>NOFORMAT<span class=\"token punctuation\">,</span>NOINIT<span class=\"token punctuation\">,</span>NAME<span class=\"token operator\">=</span>N<span class=\"token string\">'zsyydb-差异数据库备份'</span><span class=\"token punctuation\">,</span>SKIP<span class=\"token punctuation\">,</span>NOREWIND<span class=\"token punctuation\">,</span>NOUNLOAD<span class=\"token punctuation\">,</span>STATS<span class=\"token operator\">=</span><span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>GO</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">--Diff Restore</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">RESTORE</span> <span class=\"token keyword\">DATABASE</span> <span class=\"token punctuation\">[</span>zsyydb<span class=\"token punctuation\">]</span> <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">DISK</span><span class=\"token operator\">=</span>N<span class=\"token string\">'D:\\backup\\zsyydb01.bak'</span> <span class=\"token keyword\">WITH</span> <span class=\"token keyword\">FILE</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">REPLACE</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>MOVE N<span class=\"token string\">'zsyydb'</span><span class=\"token keyword\">TO</span> N<span class=\"token string\">'D:\\Program Files\\Microsoft SQL Server\\MSSQL10_50.MSSQLSERVER\\MSSQL\\DATA\\zsyydb.mdf'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>MOVE N<span class=\"token string\">'HistoryData'</span><span class=\"token keyword\">TO</span> N<span class=\"token string\">'D:\\Program Files\\Microsoft SQL Server\\MSSQL10_50.MSSQLSERVER\\MSSQL\\DATA\\HistoryData.ndf'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>MOVE N<span class=\"token string\">'UnConfirm2013'</span><span class=\"token keyword\">TO</span> N<span class=\"token string\">'D:\\Program Files\\Microsoft SQL Server\\MSSQL10_50.MSSQLSERVER\\MSSQL\\DATA\\UnConfirm2013.ndf'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>MOVE N<span class=\"token string\">'zsyylog'</span><span class=\"token keyword\">TO</span> N<span class=\"token string\">'T:\\MSSQL10_50.MSSQLSERVER\\MSSQL\\LOG\\zsyydb.ldf'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>MOVE N<span class=\"token string\">'zsyylog_1'</span><span class=\"token keyword\">TO</span> N<span class=\"token string\">'T:\\MSSQL10_50.MSSQLSERVER\\MSSQL\\LOG\\zsyydb1.ldf'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>NOUNLOAD<span class=\"token punctuation\">,</span>STATS<span class=\"token operator\">=</span><span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>GO</pre></td></tr></table></figure>",
            "tags": [
                "Database",
                "SQLServer",
                "backup",
                "restore"
            ]
        },
        {
            "id": "https://jove-2761781.github.io/hexo_blog/database/sqlserver/alwayson%20database%20can%20not%20shrink%20log%20file/",
            "url": "https://jove-2761781.github.io/hexo_blog/database/sqlserver/alwayson%20database%20can%20not%20shrink%20log%20file/",
            "title": "alwayson database can not shrink log file",
            "date_published": "2023-02-06T15:47:00.576Z",
            "content_html": "<h1 id=\"alwayson-database-can-not-shrink-log-file\"><a class=\"anchor\" href=\"#alwayson-database-can-not-shrink-log-file\">#</a> alwayson database can not shrink log file</h1>\n<p>AlwaysOn database 事务日志截断后，日志文件无法收缩，导致日志文件占用磁盘空间大。</p>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<p>If you have scheduled T-Log Backup on alwaysOn Database, After completion of T-Log Backup check the <strong>log_reuse_wait_desc</strong> of database using query</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> name<span class=\"token punctuation\">,</span>log_reuse_wait_desc <span class=\"token keyword\">from</span> sys<span class=\"token punctuation\">.</span><span class=\"token keyword\">databases</span> <span class=\"token keyword\">where</span> name <span class=\"token operator\">like</span> <span class=\"token string\">'Name Of Database'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>If column log_reuse_wait_desc returns value &quot;<strong>NOTHING</strong>&quot;, Immediately execute <strong>DBCC SHRINKFILE</strong> Command and shrink Log File without Error.</p>\n",
            "tags": [
                "Database",
                "SQLServer",
                "troubleshooting"
            ]
        },
        {
            "id": "https://jove-2761781.github.io/hexo_blog/linux/rhel/shell/oracle_11g_setup/",
            "url": "https://jove-2761781.github.io/hexo_blog/linux/rhel/shell/oracle_11g_setup/",
            "title": "oracle_11g_setup",
            "date_published": "2023-02-06T15:47:00.571Z",
            "content_html": "<h1 id=\"oracle_11g_setup\"><a class=\"anchor\" href=\"#oracle_11g_setup\">#</a> oracle_11g_setup</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#! /usr/bin/env bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># set -e  Exit immediately if a command exits with a non-zero status.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token parameter variable\">-e</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">source</span> /assets/colorecho</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">trap</span> <span class=\"token string\">\"echo_red '******* ERROR: Something went wrong.'; exit 1\"</span> SIGTERM</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin class-name\">trap</span> <span class=\"token string\">\"echo_red '******* Caught SIGINT signal. Stopping...'; exit 2\"</span> SIGINT</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#Install prerequisites directly without virtual package</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function-name function\">deps</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Installing dependencies\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> binutils compat-libstdc++-33 compat-libstdc++-33.i686 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  ksh elfutils-libelf elfutils-libelf-devel glibc glibc-common glibc-devel <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  gcc gcc-c++ libaio libaio.i686 libaio-devel libaio-devel.i686 libgcc libstdc++ <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  libstdc++.i686 libstdc++-devel libstdc++-devel.i686 <span class=\"token function\">make</span> sysstat unixODBC unixODBC-devel</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  yum clean all</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> /var/lib/<span class=\"token punctuation\">&#123;</span>cache,log<span class=\"token punctuation\">&#125;</span> /var/log/lastlog</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function-name function\">create_users</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Configuring users\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token function\">groupadd</span> <span class=\"token parameter variable\">-g</span> <span class=\"token number\">500</span> oinstall</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token function\">groupadd</span> <span class=\"token parameter variable\">-g</span> <span class=\"token number\">501</span> dba</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token function\">useradd</span> <span class=\"token parameter variable\">-u</span> <span class=\"token number\">500</span> <span class=\"token parameter variable\">-g</span> oinstall <span class=\"token parameter variable\">-G</span> dba oracle</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"oracle:oracle\"</span> <span class=\"token operator\">|</span> chpasswd</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"root:welcome\"</span> <span class=\"token operator\">|</span> chpasswd</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> <span class=\"token parameter variable\">-m</span> <span class=\"token number\">755</span> /u01/app/oracle</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> <span class=\"token parameter variable\">-m</span> <span class=\"token number\">755</span> /u01/app/oraInventory</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> <span class=\"token parameter variable\">-m</span> <span class=\"token number\">755</span> /u01/app/dpdump</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token function\">chown</span> <span class=\"token parameter variable\">-R</span> oracle:oinstall /u01/app</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> <span class=\"token string\">\"s/pam_namespace.so/pam_namespace.so<span class=\"token entity\" title=\"\\n\">\\n</span>session    required     pam_limits.so/g\"</span> /etc/pam.d/login</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token function\">cat</span> /assets/profile <span class=\"token operator\">>></span> ~oracle/.bash_profile</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token function\">cat</span> /assets/profile <span class=\"token operator\">>></span> ~oracle/.bashrc</pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token function-name function\">sysctl_and_limits</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token function\">cat</span> /assets/sysctl.conf <span class=\"token operator\">>></span> /etc/sysctl.conf</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token function\">cat</span> /assets/limits.conf <span class=\"token operator\">>></span> /etc/security/limits.conf</pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>deps</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>create_users</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>sysctl_and_limits</pre></td></tr></table></figure>",
            "tags": [
                "Linux",
                "RHEL",
                "shell"
            ]
        },
        {
            "id": "https://jove-2761781.github.io/hexo_blog/linux/rhel/shell/lsb_functions/",
            "url": "https://jove-2761781.github.io/hexo_blog/linux/rhel/shell/lsb_functions/",
            "title": "lsb_functions",
            "date_published": "2023-02-06T15:47:00.569Z",
            "content_html": "<h1 id=\"lsb_functions\"><a class=\"anchor\" href=\"#lsb_functions\">#</a> lsb_functions</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># Use LSB init script functions for printing messages, if possible</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">lsb_functions</span><span class=\"token operator\">=</span><span class=\"token string\">\"/lib/lsb/init-functions\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token builtin class-name\">test</span> <span class=\"token parameter variable\">-f</span> <span class=\"token variable\">$lsb_functions</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token builtin class-name\">.</span> <span class=\"token variable\">$lsb_functions</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\"># Include non-LSB Redhat init functions to make systemctl redirect work</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token assign-left variable\">init_functions</span><span class=\"token operator\">=</span><span class=\"token string\">\"/etc/init.d/functions\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token builtin class-name\">test</span> <span class=\"token parameter variable\">-f</span> <span class=\"token variable\">$init_functions</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token builtin class-name\">.</span> <span class=\"token variable\">$init_functions</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function-name function\">log_success_msg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\" SUCCESS! <span class=\"token variable\">$@</span>\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token function-name function\">log_failure_msg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\" ERROR! <span class=\"token variable\">$@</span>\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr></table></figure>",
            "tags": [
                "Linux",
                "RHEL",
                "shell"
            ]
        },
        {
            "id": "https://jove-2761781.github.io/hexo_blog/linux/rhel/shell/echo_color/",
            "url": "https://jove-2761781.github.io/hexo_blog/linux/rhel/shell/echo_color/",
            "title": "echo_color",
            "date_published": "2023-02-06T15:47:00.568Z",
            "content_html": "<h1 id=\"echo_color\"><a class=\"anchor\" href=\"#echo_color\">#</a> echo_color</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/usr/bin/env bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">ecred</span><span class=\"token operator\">=</span><span class=\"token string\">'\\033[0;31m'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">ecyellow</span><span class=\"token operator\">=</span><span class=\"token string\">'\\033[0;33m'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">ecgreen</span><span class=\"token operator\">=</span><span class=\"token string\">'\\033[32m'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token assign-left variable\">ecend</span><span class=\"token operator\">=</span><span class=\"token string\">'\\033[0m'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function-name function\">echo_red</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;ecred&#125;</span><span class=\"token variable\">$@</span><span class=\"token variable\">$&#123;ecend&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function-name function\">echo_yellow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;ecyellow&#125;</span><span class=\"token variable\">$@</span><span class=\"token variable\">$&#123;ecend&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function-name function\">echo_green</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;ecgreen&#125;</span><span class=\"token variable\">$@</span><span class=\"token variable\">$&#123;ecend&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>格式解析</strong></p>\n<p>@<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zMi5sb2xpLm5ldC8yMDIyLzA3LzA4L0xxSjhEY2g2R0hsUWpZdC5wbmc=\"></span></p>\n<p><strong>Colors Reference</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>字颜色：30—–37</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>　　<span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> “<span class=\"token punctuation\">\\</span>033<span class=\"token punctuation\">[</span>30m 黑色字 <span class=\"token punctuation\">\\</span>033<span class=\"token punctuation\">[</span>0m”</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>　　<span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> “<span class=\"token punctuation\">\\</span>033<span class=\"token punctuation\">[</span>31m 红色字 <span class=\"token punctuation\">\\</span>033<span class=\"token punctuation\">[</span>0m”</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>　　<span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> “<span class=\"token punctuation\">\\</span>033<span class=\"token punctuation\">[</span>32m 绿色字 <span class=\"token punctuation\">\\</span>033<span class=\"token punctuation\">[</span>0m”</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>　　<span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> “<span class=\"token punctuation\">\\</span>033<span class=\"token punctuation\">[</span>33m 黄色字 <span class=\"token punctuation\">\\</span>033<span class=\"token punctuation\">[</span>0m”</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>　　<span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> “<span class=\"token punctuation\">\\</span>033<span class=\"token punctuation\">[</span>34m 蓝色字 <span class=\"token punctuation\">\\</span>033<span class=\"token punctuation\">[</span>0m”</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>　　<span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> “<span class=\"token punctuation\">\\</span>033<span class=\"token punctuation\">[</span>35m 紫色字 <span class=\"token punctuation\">\\</span>033<span class=\"token punctuation\">[</span>0m”</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>　　<span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> “<span class=\"token punctuation\">\\</span>033<span class=\"token punctuation\">[</span>36m 天蓝字 <span class=\"token punctuation\">\\</span>033<span class=\"token punctuation\">[</span>0m”</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>　　<span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> “<span class=\"token punctuation\">\\</span>033<span class=\"token punctuation\">[</span>37m 白色字 <span class=\"token punctuation\">\\</span>033<span class=\"token punctuation\">[</span>0m”</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>字背景颜色范围：40—–47</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>　　<span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> “<span class=\"token punctuation\">\\</span>033<span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">;</span>37m 黑底白字 <span class=\"token punctuation\">\\</span>033<span class=\"token punctuation\">[</span>0m”</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>　　<span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> “<span class=\"token punctuation\">\\</span>033<span class=\"token punctuation\">[</span><span class=\"token number\">41</span><span class=\"token punctuation\">;</span>37m 红底白字 <span class=\"token punctuation\">\\</span>033<span class=\"token punctuation\">[</span>0m”</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>　　<span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> “<span class=\"token punctuation\">\\</span>033<span class=\"token punctuation\">[</span><span class=\"token number\">42</span><span class=\"token punctuation\">;</span>37m 绿底白字 <span class=\"token punctuation\">\\</span>033<span class=\"token punctuation\">[</span>0m”</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>　　<span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> “<span class=\"token punctuation\">\\</span>033<span class=\"token punctuation\">[</span><span class=\"token number\">43</span><span class=\"token punctuation\">;</span>37m 黄底白字 <span class=\"token punctuation\">\\</span>033<span class=\"token punctuation\">[</span>0m”</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>　　<span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> “<span class=\"token punctuation\">\\</span>033<span class=\"token punctuation\">[</span><span class=\"token number\">44</span><span class=\"token punctuation\">;</span>37m 蓝底白字 <span class=\"token punctuation\">\\</span>033<span class=\"token punctuation\">[</span>0m”</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>　　<span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> “<span class=\"token punctuation\">\\</span>033<span class=\"token punctuation\">[</span><span class=\"token number\">45</span><span class=\"token punctuation\">;</span>37m 紫底白字 <span class=\"token punctuation\">\\</span>033<span class=\"token punctuation\">[</span>0m”</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>　　<span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> “<span class=\"token punctuation\">\\</span>033<span class=\"token punctuation\">[</span><span class=\"token number\">46</span><span class=\"token punctuation\">;</span>37m 天蓝底白字 <span class=\"token punctuation\">\\</span>033<span class=\"token punctuation\">[</span>0m”</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>　　<span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> “<span class=\"token punctuation\">\\</span>033<span class=\"token punctuation\">[</span><span class=\"token number\">47</span><span class=\"token punctuation\">;</span>30m 白底黑字 <span class=\"token punctuation\">\\</span>033<span class=\"token punctuation\">[</span>0m”</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>最后面控制选项说明</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>　　<span class=\"token punctuation\">\\</span><span class=\"token number\">33</span><span class=\"token punctuation\">[</span>0m 关闭所有属性</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>　　<span class=\"token punctuation\">\\</span><span class=\"token number\">33</span><span class=\"token punctuation\">[</span>1m 设置高亮度</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>　　<span class=\"token punctuation\">\\</span><span class=\"token number\">33</span><span class=\"token punctuation\">[</span>4m 下划线</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>　　<span class=\"token punctuation\">\\</span><span class=\"token number\">33</span><span class=\"token punctuation\">[</span>5m 闪烁</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>　　<span class=\"token punctuation\">\\</span><span class=\"token number\">33</span><span class=\"token punctuation\">[</span>7m 反显</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>　　<span class=\"token punctuation\">\\</span><span class=\"token number\">33</span><span class=\"token punctuation\">[</span>8m 消隐</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>　　<span class=\"token punctuation\">\\</span><span class=\"token number\">33</span><span class=\"token punctuation\">[</span>30m — <span class=\"token punctuation\">\\</span><span class=\"token number\">33</span><span class=\"token punctuation\">[</span>37m 设置前景色</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>　　<span class=\"token punctuation\">\\</span><span class=\"token number\">33</span><span class=\"token punctuation\">[</span>40m — <span class=\"token punctuation\">\\</span><span class=\"token number\">33</span><span class=\"token punctuation\">[</span>47m 设置背景色</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>　　<span class=\"token punctuation\">\\</span><span class=\"token number\">33</span><span class=\"token punctuation\">[</span>nA 光标上移n行</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>　　<span class=\"token punctuation\">\\</span><span class=\"token number\">33</span><span class=\"token punctuation\">[</span>nB 光标下移n行</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>　　<span class=\"token punctuation\">\\</span><span class=\"token number\">33</span><span class=\"token punctuation\">[</span>nC 光标右移n行</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>　　<span class=\"token punctuation\">\\</span><span class=\"token number\">33</span><span class=\"token punctuation\">[</span>nD 光标左移n行</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>　　<span class=\"token punctuation\">\\</span><span class=\"token number\">33</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">;</span>xH设置光标位置</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>　　<span class=\"token punctuation\">\\</span><span class=\"token number\">33</span><span class=\"token punctuation\">[</span>2J 清屏</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>　　<span class=\"token punctuation\">\\</span><span class=\"token number\">33</span><span class=\"token punctuation\">[</span>K 清除从光标到行尾的内容</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>　　<span class=\"token punctuation\">\\</span><span class=\"token number\">33</span><span class=\"token punctuation\">[</span>s 保存光标位置</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>　　<span class=\"token punctuation\">\\</span><span class=\"token number\">33</span><span class=\"token punctuation\">[</span>u 恢复光标位置</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>　　<span class=\"token punctuation\">\\</span><span class=\"token number\">33</span><span class=\"token punctuation\">[</span>?25l 隐藏光标</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>　　<span class=\"token punctuation\">\\</span><span class=\"token number\">33</span><span class=\"token punctuation\">[</span>?25h 显示光标</pre></td></tr></table></figure>",
            "tags": [
                "Linux",
                "RHEL",
                "shell"
            ]
        },
        {
            "id": "https://jove-2761781.github.io/hexo_blog/linux/rhel/shell/ping/",
            "url": "https://jove-2761781.github.io/hexo_blog/linux/rhel/shell/ping/",
            "title": "ping",
            "date_published": "2023-02-06T15:47:00.561Z",
            "content_html": "<p>检测某个网段的 IP 地址是否可达。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">254</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token function\">ping</span> <span class=\"token parameter variable\">-c</span> <span class=\"token number\">1</span> <span class=\"token number\">192.168</span>.0.<span class=\"token variable\">$&#123;i&#125;</span> <span class=\"token operator\">&amp;></span> /dev/null <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"192.168.0.<span class=\"token variable\">$&#123;i&#125;</span> is alive\"</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"192.168.0.<span class=\"token variable\">$&#123;i&#125;</span> is down\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">wait</span></pre></td></tr></table></figure><p><code>wait</code>  - Wait for job completion and return exit status.</p>\n",
            "tags": [
                "Linux",
                "RHEL",
                "shell"
            ]
        },
        {
            "id": "https://jove-2761781.github.io/hexo_blog/linux/rhel/shell/file%20archive/",
            "url": "https://jove-2761781.github.io/hexo_blog/linux/rhel/shell/file%20archive/",
            "title": "File Archive",
            "date_published": "2023-02-06T15:47:00.559Z",
            "content_html": "<h1 id=\"file-archive\"><a class=\"anchor\" href=\"#file-archive\">#</a> File Archive</h1>\n<p>归档 1 天前的文件，并将原文件删除。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">find</span> /log/ <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-name</span> <span class=\"token string\">'file_*'</span> <span class=\"token parameter variable\">-atime</span> <span class=\"token parameter variable\">-1</span> <span class=\"token parameter variable\">-exec</span> <span class=\"token function\">mv</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> /log/bak/ <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-zcf</span> /log/bak_<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">date</span> +%H%M%S<span class=\"token variable\">`</span></span>.tar.gz <span class=\"token parameter variable\">-P</span> /log/bak/</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-f</span> /l/bak/*</pre></td></tr></table></figure>",
            "tags": [
                "Linux",
                "RHEL",
                "shell"
            ]
        },
        {
            "id": "https://jove-2761781.github.io/hexo_blog/linux/rhel/yum/creating%20a%20yum%20repository/",
            "url": "https://jove-2761781.github.io/hexo_blog/linux/rhel/yum/creating%20a%20yum%20repository/",
            "title": "Creating a Yum Repository",
            "date_published": "2023-02-06T15:47:00.554Z",
            "content_html": "<h1 id=\"creating-a-yum-repository\"><a class=\"anchor\" href=\"#creating-a-yum-repository\">#</a> Creating a Yum Repository</h1>\n<p>To set up a yum repository:</p>\n<ol>\n<li>\n<p>Install the createrepo package:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> createrepo</pre></td></tr></table></figure></li>\n<li>\n<p>Copy all packages for your new repository into one directory, such as /tmp/local_repo/:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cp</span> /your/packages/*.rpm /tmp/local_repo/</pre></td></tr></table></figure></li>\n<li>\n<p>To create the repository run:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>createrepo /tmp/local_repo/</pre></td></tr></table></figure><p>This creates the necessary metadata for the yum repository and places metadata in a newly created subdirectory repodata.</p>\n</li>\n</ol>\n<p>The repository is now ready to be consumed by yum. This repository can be shared over the HTTP or FTP protocol, or refered directly from the local machine.</p>\n<hr />\n<p>&lt;font color=notice&gt;NOTE: When constructing the URL for a repository, refer to the /mnt/local_repo not to /mnt/local_repo/repodata, as this directory contains only metadata. Actual yum packages are in /mnt/local_repo.&lt;/font&gt;</p>\n<hr />\n",
            "tags": [
                "Linux",
                "RHEL",
                "yum"
            ]
        },
        {
            "id": "https://jove-2761781.github.io/hexo_blog/linux/rhel/text%20processing/sed/",
            "url": "https://jove-2761781.github.io/hexo_blog/linux/rhel/text%20processing/sed/",
            "title": "sed",
            "date_published": "2023-02-06T15:47:00.545Z",
            "content_html": "<h1 id=\"sed\"><a class=\"anchor\" href=\"#sed\">#</a> sed</h1>\n<h2 id=\"sed的选项-命令-替换标记\"><a class=\"anchor\" href=\"#sed的选项-命令-替换标记\">#</a> sed 的选项、命令、替换标记</h2>\n<p><strong>命令格式</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span> <span class=\"token string\">'command'</span> file<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span> <span class=\"token parameter variable\">-f</span> scriptfile file<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"选项\"><a class=\"anchor\" href=\"#选项\">#</a> 选项</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>-e<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>或--expression<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>：以选项中的指定的script来处理输入的文本文件；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>-f<span class=\"token operator\">&lt;</span>script文件<span class=\"token operator\">></span>或--file<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>script文件<span class=\"token operator\">></span>：以选项中指定的script文件来处理输入的文本文件；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>-h或--help：显示帮助；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>-n或--quiet或——silent：仅显示script处理后的结果；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-V或--version：显示版本信息。</pre></td></tr></table></figure><h3 id=\"参数\"><a class=\"anchor\" href=\"#参数\">#</a> 参数</h3>\n<p>文件：指定待处理的文本文件列表。</p>\n<h3 id=\"sed命令\"><a class=\"anchor\" href=\"#sed命令\">#</a> sed 命令</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a<span class=\"token punctuation\">\\</span> <span class=\"token comment\"># 在当前行下面插入文本。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>i<span class=\"token punctuation\">\\</span> <span class=\"token comment\"># 在当前行上面插入文本。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>c<span class=\"token punctuation\">\\</span> <span class=\"token comment\"># 把选定的行改为新的文本。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>d <span class=\"token comment\"># 删除，删除选择的行。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>D <span class=\"token comment\"># 删除模板块的第一行。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>s <span class=\"token comment\"># 替换指定字符</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>h <span class=\"token comment\"># 拷贝模板块的内容到内存中的缓冲区。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>H <span class=\"token comment\"># 追加模板块的内容到内存中的缓冲区。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>g <span class=\"token comment\"># 获得内存缓冲区的内容，并替代当前模板块中的文本。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>G <span class=\"token comment\"># 获得内存缓冲区的内容，并追加到当前模板块文本的后面。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>l <span class=\"token comment\"># 列表不能打印字符的清单。</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>n <span class=\"token comment\"># 读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>N <span class=\"token comment\"># 追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>p <span class=\"token comment\"># 打印模板块的行。</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>P <span class=\"token comment\"># (大写) 打印模板块的第一行。</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>q <span class=\"token comment\"># 退出 Sed。</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>b lable <span class=\"token comment\"># 分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>r <span class=\"token function\">file</span> <span class=\"token comment\"># 从 file 中读行。</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>t label <span class=\"token comment\"># if 分支，从最后一行开始，条件一旦满足或者 T，t 命令，将导致分支到带有标号的命令处，或者到脚本的末尾。</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>T label <span class=\"token comment\"># 错误分支，从最后一行开始，一旦发生错误或者 T，t 命令，将导致分支到带有标号的命令处，或者到脚本的末尾。</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>w <span class=\"token function\">file</span> <span class=\"token comment\"># 写并追加模板块到 file 末尾。  </span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>W <span class=\"token function\">file</span> <span class=\"token comment\"># 写并追加模板块的第一行到 file 末尾。  </span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token operator\">!</span> <span class=\"token comment\"># 表示后面的命令对所有没有被选定的行发生作用。  </span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token operator\">=</span> <span class=\"token comment\"># 打印当前行号码。  </span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># # 把注释扩展到下一个换行符以前。</span></pre></td></tr></table></figure><h3 id=\"sed替换标记\"><a class=\"anchor\" href=\"#sed替换标记\">#</a> sed 替换标记</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>g <span class=\"token comment\"># 表示行内全面替换。  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p <span class=\"token comment\"># 表示打印行。  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>w <span class=\"token comment\"># 表示把行写入一个文件。  </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>x <span class=\"token comment\"># 表示互换模板块中的文本和缓冲区中的文本。  </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>y <span class=\"token comment\"># 表示把一个字符翻译为另外的字符（但是不用于正则表达式）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">\\</span><span class=\"token number\">1</span> <span class=\"token comment\"># 子串匹配标记</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&amp;</span> <span class=\"token comment\"># 已匹配字符串标记</span></pre></td></tr></table></figure><h3 id=\"sed元字符集\"><a class=\"anchor\" href=\"#sed元字符集\">#</a> sed 元字符集</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>^ <span class=\"token comment\"># 匹配行开始，如：/^sed / 匹配所有以 sed 开头的行。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token comment\"># 匹配行结束，如：/sed$/ 匹配所有以 sed 结尾的行。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">.</span> <span class=\"token comment\"># 匹配一个非换行符的任意字符，如：/s.d/ 匹配 s 后接一个任意字符，最后是 d。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>* <span class=\"token comment\"># 匹配 0 个或多个字符，如：/*sed / 匹配所有模板是一个或多个空格后紧跟 sed 的行。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 匹配一个指定范围内的字符，如 /[sS] ed / 匹配 sed 和 Sed。  </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span>^<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 匹配一个不在指定范围内的字符，如：/[^A-RT-Z] ed / 匹配不包含 A-R 和 T-Z 的一个字母开头，紧跟 ed 的行。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 匹配子串，保存匹配的字符，如 s/\\(love\\) able/\\1rs，loveable 被替换成 lovers。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&amp;</span> <span class=\"token comment\"># 保存搜索字符用来替换其他字符，如 s/love/ **&amp;** /，love 这成 **love** 。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">\\</span><span class=\"token operator\">&lt;</span> <span class=\"token comment\"># 匹配单词的开始，如:/\\&lt;love / 匹配包含以 love 开头的单词的行。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">\\</span><span class=\"token operator\">></span> <span class=\"token comment\"># 匹配单词的结束，如 /love\\>/ 匹配包含以 love 结尾的单词的行。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>x<span class=\"token punctuation\">\\</span><span class=\"token punctuation\">&#123;</span>m<span class=\"token punctuation\">\\</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\"># 重复字符 x，m 次，如：/0\\&#123;5\\&#125;/ 匹配包含 5 个 0 的行。</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>x<span class=\"token punctuation\">\\</span><span class=\"token punctuation\">&#123;</span>m,<span class=\"token punctuation\">\\</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\"># 重复字符 x，至少 m 次，如：/0\\&#123;5,\\&#125;/ 匹配至少有 5 个 0 的行。</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>x<span class=\"token punctuation\">\\</span><span class=\"token punctuation\">&#123;</span>m,n<span class=\"token punctuation\">\\</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\"># 重复字符 x，至少 m 次，不多于 n 次，如：/0\\&#123;5,10\\&#125;/ 匹配 5~10 个 0 的行。</span></pre></td></tr></table></figure><h2 id=\"sed用法实例\"><a class=\"anchor\" href=\"#sed用法实例\">#</a> sed 用法实例</h2>\n<h3 id=\"替换操作s命令\"><a class=\"anchor\" href=\"#替换操作s命令\">#</a> 替换操作：s 命令</h3>\n<p>替换文本中的字符串：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'s/book/books/'</span> <span class=\"token function\">file</span></pre></td></tr></table></figure><p><strong>-n 选项</strong> 和 <strong>p 命令</strong> 一起使用表示只打印那些发生替换的行：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'s/test/TEST/p'</span> <span class=\"token function\">file</span></pre></td></tr></table></figure><p>直接编辑文件 <strong>选项 - i</strong> ，会匹配 file 文件中每一行的所有 book 替换为 books：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> <span class=\"token string\">'s/book/books/g'</span> <span class=\"token function\">file</span></pre></td></tr></table></figure><h3 id=\"全面替换标记g\"><a class=\"anchor\" href=\"#全面替换标记g\">#</a> 全面替换标记 g</h3>\n<p>使用后缀 /g 标记会替换每一行中的所有匹配：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'s/book/books/g'</span> <span class=\"token function\">file</span></pre></td></tr></table></figure><p>当需要从第 N 处匹配开始替换时，可以使用 /Ng：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> sksksksksksk <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'s/sk/SK/2g'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>skSKSKSKSKSK</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">echo</span> sksksksksksk <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'s/sk/SK/3g'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>skskSKSKSKSK</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin class-name\">echo</span> sksksksksksk <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'s/sk/SK/4g'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>skskskSKSKSK</pre></td></tr></table></figure><h3 id=\"定界符\"><a class=\"anchor\" href=\"#定界符\">#</a> 定界符</h3>\n<p>以上命令中字符 / 在 sed 中作为定界符使用，也可以使用任意的定界符：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'s:test:TEXT:g'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'s|test|TEXT|g'</span></pre></td></tr></table></figure><p>定界符出现在样式内部时，需要进行转义：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'s/\\/bin/\\/usr\\/local\\/bin/g'</span></pre></td></tr></table></figure><h3 id=\"删除操作d命令\"><a class=\"anchor\" href=\"#删除操作d命令\">#</a> 删除操作：d 命令</h3>\n<p>删除空白行：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'/^$/d'</span> <span class=\"token function\">file</span></pre></td></tr></table></figure><p>删除文件的第 2 行：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'2d'</span> <span class=\"token function\">file</span></pre></td></tr></table></figure><p>删除文件的第 2 行到末尾所有行：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'2,$d'</span> <span class=\"token function\">file</span></pre></td></tr></table></figure><p>删除文件最后一行：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'$d'</span> <span class=\"token function\">file</span></pre></td></tr></table></figure><p>删除文件中所有开头是 test 的行：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'/^test/'</span>d <span class=\"token function\">file</span></pre></td></tr></table></figure><h3 id=\"已匹配字符串标记\"><a class=\"anchor\" href=\"#已匹配字符串标记\">#</a> 已匹配字符串标记 &amp;</h3>\n<p>正则表达式 \\w+ 匹配每一个单词，使用 [&amp;] 替换它，&amp; 对应于之前所匹配到的单词：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> this is a <span class=\"token builtin class-name\">test</span> line <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'s/\\w\\+/[&amp;]/g'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>this<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>is<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>test<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>line<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>所有以 192.168.0.1 开头的行都会被替换成它自已加 localhost：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'s/^192.168.0.1/&amp;localhost/'</span> <span class=\"token function\">file</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">192.168</span>.0.1localhost</pre></td></tr></table></figure><h3 id=\"子串匹配标记1\"><a class=\"anchor\" href=\"#子串匹配标记1\">#</a> 子串匹配标记 \\1</h3>\n<p>匹配给定样式的其中一部分：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> this is digit <span class=\"token number\">7</span> <span class=\"token keyword\">in</span> a number <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'s/digit \\([0-9]\\)/\\1/'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>this is <span class=\"token number\">7</span> <span class=\"token keyword\">in</span> a number</pre></td></tr></table></figure><p>命令中 digit 7，被替换成了 7。样式匹配到的子串是 7，(..) 用于匹配子串，对于匹配到的第一个子串就标记为 <strong>\\1</strong> ，依此类推匹配到的第二个结果就是 <strong>\\2</strong> ，例如：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> aaa BBB <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'s/\\([a-z]\\+\\) \\([A-Z]\\+\\)/\\2 \\1/'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>BBB aaa</pre></td></tr></table></figure><p>love 被标记为 1，所有 loveable 会被替换成 lovers，并打印出来：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'s/\\(love\\)able/\\1rs/p'</span> <span class=\"token function\">file</span></pre></td></tr></table></figure><h3 id=\"组合多个表达式\"><a class=\"anchor\" href=\"#组合多个表达式\">#</a> 组合多个表达式</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'表达式'</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'表达式'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>等价于：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'表达式; 表达式'</span></pre></td></tr></table></figure><h3 id=\"引用\"><a class=\"anchor\" href=\"#引用\">#</a> 引用</h3>\n<p>sed 表达式可以使用单引号来引用，但是如果表达式内部包含变量字符串，就需要使用双引号。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">test</span><span class=\"token operator\">=</span>hello</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> hello WORLD <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">\"s/<span class=\"token variable\">$test</span>/HELLO\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>HELLO WORLD</pre></td></tr></table></figure><h3 id=\"选定行的范围逗号\"><a class=\"anchor\" href=\"#选定行的范围逗号\">#</a> 选定行的范围：,（逗号）</h3>\n<p>所有在模板 test 和 check 所确定的范围内的行都被打印：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'/test/,/check/p'</span> <span class=\"token function\">file</span></pre></td></tr></table></figure><p>打印从第 5 行开始到第一个包含以 test 开始的行之间的所有行：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'5,/^test/p'</span> <span class=\"token function\">file</span></pre></td></tr></table></figure><p>对于模板 test 和 west 之间的行，每行的末尾用字符串 aaa bbb 替换：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'/test/,/west/s/$/aaa bbb/'</span> <span class=\"token function\">file</span></pre></td></tr></table></figure><h3 id=\"多点编辑e命令\"><a class=\"anchor\" href=\"#多点编辑e命令\">#</a> 多点编辑：e 命令</h3>\n<p>-e 选项允许在同一行里执行多条命令：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">'1,5d'</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">'s/test/check/'</span> <span class=\"token function\">file</span></pre></td></tr></table></figure><p>上面 sed 表达式的第一条命令删除 1 至 5 行，第二条命令用 check 替换 test。命令的执行顺序对结果有影响。如果两个命令都是替换命令，那么第一个替换命令将影响第二个替换命令的结果。</p>\n<p>和 -e 等价的命令是 --expression：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">--expression</span><span class=\"token operator\">=</span><span class=\"token string\">'s/test/check/'</span> <span class=\"token parameter variable\">--expression</span><span class=\"token operator\">=</span><span class=\"token string\">'/love/d'</span> <span class=\"token function\">file</span></pre></td></tr></table></figure><h3 id=\"从文件读入r命令\"><a class=\"anchor\" href=\"#从文件读入r命令\">#</a> 从文件读入：r 命令</h3>\n<p>file 里的内容被读进来，显示在与 test 匹配的行后面，如果匹配多行，则 file 的内容将显示在所有匹配行的下面：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'/test/r file'</span> filename</pre></td></tr></table></figure><h3 id=\"写入文件w命令\"><a class=\"anchor\" href=\"#写入文件w命令\">#</a> 写入文件：w 命令</h3>\n<p>在 example 中所有包含 test 的行都被写入 file 里：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'/test/w file'</span> example</pre></td></tr></table></figure><h3 id=\"追加行下a命令\"><a class=\"anchor\" href=\"#追加行下a命令\">#</a> 追加（行下）：a\\ 命令</h3>\n<p>将 this is a test line 追加到 以 test 开头的行后面：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'/^test/a\\this is a test line'</span> <span class=\"token function\">file</span></pre></td></tr></table></figure><p>在 test.conf 文件第 2 行之后插入 this is a test line：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> <span class=\"token string\">'2a\\this is a test line'</span> test.conf</pre></td></tr></table></figure><h3 id=\"插入行上i命令\"><a class=\"anchor\" href=\"#插入行上i命令\">#</a> 插入（行上）：i\\ 命令</h3>\n<p>将 this is a test line 追加到以 test 开头的行前面：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'/^test/i\\this is a test line'</span> <span class=\"token function\">file</span></pre></td></tr></table></figure><p>在 test.conf 文件第 5 行之前插入 this is a test line：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> <span class=\"token string\">'5i\\this is a test line'</span> test.conf</pre></td></tr></table></figure><h3 id=\"下一个n命令\"><a class=\"anchor\" href=\"#下一个n命令\">#</a> 下一个：n 命令</h3>\n<p>如果 test 被匹配，则移动到匹配行的下一行，替换这一行的 aa，变为 bb，并打印该行，然后继续：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'/test/&#123; n; s/aa/bb/; &#125;'</span> <span class=\"token function\">file</span></pre></td></tr></table></figure><h3 id=\"变形y命令\"><a class=\"anchor\" href=\"#变形y命令\">#</a> 变形：y 命令</h3>\n<p>把 1~10 行内所有 abcde 转变为大写，注意，正则表达式元字符不能使用这个命令：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'1,10y/abcde/ABCDE/'</span> <span class=\"token function\">file</span></pre></td></tr></table></figure><h3 id=\"退出q命令\"><a class=\"anchor\" href=\"#退出q命令\">#</a> 退出：q 命令</h3>\n<p>打印完第 10 行后，退出 sed</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'10q'</span> <span class=\"token function\">file</span></pre></td></tr></table></figure><h3 id=\"保持和获取h命令和g命令\"><a class=\"anchor\" href=\"#保持和获取h命令和g命令\">#</a> 保持和获取：h 命令和 G 命令</h3>\n<p>在 sed 处理文件的时候，每一行都被保存在一个叫模式空间的临时缓冲区中，除非行被删除或者输出被取消，否则所有被处理的行都将 打印在屏幕上。接着模式空间被清空，并存入新的一行等待处理。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">'/test/h'</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">'$G'</span> <span class=\"token function\">file</span></pre></td></tr></table></figure><p>在这个例子里，匹配 test 的行被找到后，将存入模式空间，h 命令将其复制并存入一个称为保持缓存区的特殊缓冲区内。第二条语句的意思是，当到达最后一行后，G 命令取出保持缓冲区的行，然后把它放回模式空间中，且追加到现在已经存在于模式空间中的行的末尾。在这个例子中就是追加到最后一行。简单来说，任何包含 test 的行都被复制并追加到该文件的末尾。</p>\n<h3 id=\"保持和互换h命令和x命令\"><a class=\"anchor\" href=\"#保持和互换h命令和x命令\">#</a> 保持和互换：h 命令和 x 命令</h3>\n<p>互换模式空间和保持缓冲区的内容。也就是把包含 test 与 check 的行互换：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">'/test/h'</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">'/check/x'</span> <span class=\"token function\">file</span></pre></td></tr></table></figure><h3 id=\"脚本scriptfile\"><a class=\"anchor\" href=\"#脚本scriptfile\">#</a> 脚本 scriptfile</h3>\n<p>sed 脚本是一个 sed 的命令清单，启动 Sed 时以 - f 选项引导脚本文件名。Sed 对于脚本中输入的命令非常挑剔，在命令的末尾不能有任何空白或文本，如果在一行中有多个命令，要用分号分隔。以 #开头的行为注释行，且不能跨行。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span> <span class=\"token parameter variable\">-f</span> scriptfile file<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"打印奇数行或偶数行\"><a class=\"anchor\" href=\"#打印奇数行或偶数行\">#</a> 打印奇数行或偶数行</h3>\n<p>方法 1：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'p;n'</span> test.txt  <span class=\"token comment\">#奇数行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'n;p'</span> test.txt  <span class=\"token comment\">#偶数行</span></pre></td></tr></table></figure><p>方法 2：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'1~2p'</span> test.txt  <span class=\"token comment\">#奇数行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'2~2p'</span> test.txt  <span class=\"token comment\">#偶数行</span></pre></td></tr></table></figure><h3 id=\"打印匹配字符串的下一行\"><a class=\"anchor\" href=\"#打印匹配字符串的下一行\">#</a> 打印匹配字符串的下一行</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-A</span> <span class=\"token number\">1</span> SCC URFILE</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'/SCC/&#123;n;p&#125;'</span> URFILE</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'/SCC/&#123;getline; print&#125;'</span> URFILE</pre></td></tr></table></figure>",
            "tags": [
                "Linux",
                "RHEL",
                "sed"
            ]
        },
        {
            "id": "https://jove-2761781.github.io/hexo_blog/linux/rhel/text%20processing/grep/",
            "url": "https://jove-2761781.github.io/hexo_blog/linux/rhel/text%20processing/grep/",
            "title": "grep",
            "date_published": "2023-02-06T15:47:00.540Z",
            "content_html": "<h1 id=\"grep\"><a class=\"anchor\" href=\"#grep\">#</a> grep</h1>\n<h2 id=\"perl-compatible-regular-expressions\"><a class=\"anchor\" href=\"#perl-compatible-regular-expressions\">#</a> Perl-compatible regular expressions</h2>\n<p>由于 bash 不支持 Capturing group ，所以有时想匹配如下文的 ip 会遇到很大的麻烦：</p>\n<p><code>time=&quot;2020-07-24 14:38:16&quot; level=info msg=&quot;Networks: map[live:10.142.128.12]&quot;</code></p>\n<p>一般会这样做：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'time=\"2020-07-24 14:38:16\" level=info msg=\"Networks: map[live:10.142.128.12]\"'</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token parameter variable\">-o</span> <span class=\"token string\">\"live:.*\\]\"</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">|</span> <span class=\"token function\">cut</span> -d<span class=\"token string\">':'</span> <span class=\"token parameter variable\">-f</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">|</span> <span class=\"token function\">cut</span> -d<span class=\"token string\">']'</span> <span class=\"token parameter variable\">-f</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><p>先匹配 live:10.142.128.12] 再一点点的切开... 特别难看。</p>\n<p>这时候，可以用 [Positive lookbehind](#Positive lookbehind) 来匹配，注意这个是只有 <code>PCRE</code>  支持的语法， posix grep 不支持。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'time=\"2020-07-24 14:38:16\" level=info msg=\"Networks: map[live:10.142.128.12]\"'</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token parameter variable\">-Po</span> <span class=\"token string\">\"(?&lt;=live:).*(?=])\"</span></pre></td></tr></table></figure><blockquote>\n<p>・-P：使用 Perl-compatible regular expressions (PCREs)</p>\n</blockquote>\n<blockquote>\n<p>・-o, --only-matching：只要匹配到的部分</p>\n</blockquote>\n<blockquote>\n<p>・(?&lt;=...)：Negative lookbehind，代表字符串中的一个位置，在该位置之前的字符序列能够匹配 pattern。在上文就是要找到 live:</p>\n</blockquote>\n<blockquote>\n<p>・(?=...)：Positive lookahead，代表字符串中的一个位置，在该位置之后的字符序列能够匹配 pattern。在上文就是要找到]</p>\n</blockquote>\n<p>所以 grep -Po &quot;(?&lt;=live:).*(?=])&quot; 就是要匹配在 live: 以及] 里的内容，也就是我们想要的 ip 了。</p>\n<p><strong>1. positive lookahead</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>?<span class=\"token operator\">=</span>pattern<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>代表字符串中的一个位置，在该位置之后的字符序列能够匹配 pattern</p>\n<p>例：</p>\n<p><code>echo &quot;rea reb rec&quot; | grep -oP &quot;re(?=a)&quot;</code> 会匹配&quot;rea&quot;的&quot;re&quot;</p>\n<p><code>echo &quot;rea reb rec&quot; | grep -oP &quot;re(?=a).&quot;</code> 会匹配&quot;rea&quot; 来证明上述匹配</p>\n<p><strong>2. negative lookahead</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>?<span class=\"token operator\">!</span>pattern<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>代表字符串中的一个位置，在该位置之后的字符序列不够匹配 pattern</p>\n<p>例：</p>\n<p><code>echo &quot;rea reb rec&quot; | grep -oP &quot;re(?!a)&quot;</code> 会匹配&quot;reb&quot;和&quot;rec&quot;的&quot;re&quot;</p>\n<p><code>echo &quot;rea reb rec&quot; | grep -oP &quot;re(?!a).&quot;</code> 会匹配&quot;reb&quot;与&quot;rec&quot; 来证明上述匹配</p>\n<p><strong>3. positive lookbehind</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>?<span class=\"token operator\">&lt;=</span>pattern<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>代表字符串中的一个位置，在该位置之前的字符序列能够匹配 pattern</p>\n<p>例：</p>\n<p><code>echo &quot;ip 127.0.0.1&quot; | grep -oP &quot;ip .*</code>  会把 ip 也匹配进来</p>\n<p><code>echo &quot;ip 127.0.0.1&quot; | grep -oP &quot;(?&lt;=ip) .*&quot;</code>  只会匹配 127.0.0.1</p>\n<p><code>echo &quot;rea reb rec&quot; | grep -oP &quot;(?&lt;=re).&quot;</code> 只会匹配&quot;a&quot;&quot;b&quot;&quot; c&quot;</p>\n<p><strong>4. negative lookbehind</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>?<span class=\"token operator\">!=</span>p<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>代表字符串中的一个位置，在该位置之前的字符序列不能够匹配 pattern。</p>\n<p>例：</p>\n<p><code>echo 'bab aab cab' | grep -oP &quot;(?&lt;!a)b&quot;</code> 只会匹配第一个&quot;b&quot;，而其他的&quot;b&quot;因为前面都有一个&quot;a&quot; 所以不会匹配</p>\n",
            "tags": [
                "Linux",
                "RHEL",
                "grep"
            ]
        },
        {
            "id": "https://jove-2761781.github.io/hexo_blog/linux/rhel/text%20processing/awk/",
            "url": "https://jove-2761781.github.io/hexo_blog/linux/rhel/text%20processing/awk/",
            "title": "awk",
            "date_published": "2023-02-06T15:47:00.538Z",
            "content_html": "<h1 id=\"awk\"><a class=\"anchor\" href=\"#awk\">#</a> awk</h1>\n<h2 id=\"awk命令格式和选项\"><a class=\"anchor\" href=\"#awk命令格式和选项\">#</a> awk 命令格式和选项</h2>\n<p><strong>语法形式</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span> <span class=\"token string\">'script'</span> <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span>value file<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span> <span class=\"token parameter variable\">-f</span> scriptfile <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span>value file<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>常用命令选项</strong></p>\n<ul>\n<li><strong>-F fs</strong> fs 指定输入分隔符，fs 可以是字符串或正则表达式，如 - F:，默认的分隔符是连续的空格或制表符</li>\n<li><strong>-v var=value</strong> 赋值一个用户定义变量，将外部变量传递给 awk</li>\n<li><strong>-f scripfile</strong> 从脚本文件中读取 awk 命令</li>\n<li><strong>-m[fr] val</strong> 对 val 值设置内在限制，-mf 选项限制分配给 val 的最大块数目；-mr 选项限制记录的最大数目。这两个功能是 Bell 实验室版 awk 的扩展功能，在标准 awk 中不适用。</li>\n</ul>\n<h2 id=\"awk模式和操作\"><a class=\"anchor\" href=\"#awk模式和操作\">#</a> awk 模式和操作</h2>\n<p>awk 脚本是由模式和操作组成的。</p>\n<h3 id=\"模式\"><a class=\"anchor\" href=\"#模式\">#</a> 模式</h3>\n<p>模式可以是以下任意一个：</p>\n<ul>\n<li>/ 正则表达式 /：使用通配符的扩展集。</li>\n<li>关系表达式：使用运算符进行操作，可以是字符串或数字的比较测试。</li>\n<li>模式匹配表达式：用运算符 <code>~</code> （匹配）和 <code>!~</code> （不匹配）。</li>\n<li>BEGIN 语句块、pattern 语句块、END 语句块：参见 awk 的工作原理</li>\n</ul>\n<h3 id=\"操作\"><a class=\"anchor\" href=\"#操作\">#</a> 操作</h3>\n<p>操作由一个或多个命令、函数、表达式组成，之间由换行符或分号隔开，并位于大括号内，主要部分是：</p>\n<ul>\n<li>变量或数组赋值</li>\n<li>输出命令</li>\n<li>内置函数</li>\n<li>控制流语句</li>\n</ul>\n<h2 id=\"awk脚本基本结构\"><a class=\"anchor\" href=\"#awk脚本基本结构\">#</a> awk 脚本基本结构</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123; print \"start\" &#125; pattern&#123; commands &#125; END&#123; print \"end\" &#125;'</span> <span class=\"token function\">file</span></pre></td></tr></table></figure><p>一个 awk 脚本通常由：BEGIN 语句块、能够使用模式匹配的通用语句块、END 语句块 3 部分组成，这三个部分是可选的。任意一个部分都可以不出现在脚本中，脚本通常是被 <strong>单引号</strong> 或 <strong>双引号</strong> 中，例如：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123; i=0 &#125; &#123; i++ &#125; END&#123; print i &#125;'</span> filename</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">\"BEGIN&#123; i=0 &#125; &#123; i++ &#125; END&#123; print i &#125;\"</span> filename</pre></td></tr></table></figure><h3 id=\"awk的工作原理\"><a class=\"anchor\" href=\"#awk的工作原理\">#</a> awk 的工作原理</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123; commands &#125; pattern&#123; commands &#125; END&#123; commands &#125;'</span></pre></td></tr></table></figure><ul>\n<li>第一步：执行 <code>BEGIN&#123; commands &#125;</code>  语句块中的语句；</li>\n<li>第二步：从文件或标准输入 (stdin) 读取一行，然后执行 <code>pattern&#123; commands &#125;</code>  语句块，它逐行扫描文件，从第一行到最后一行重复这个过程，直到文件全部被读取完毕。</li>\n<li>第三步：当读至输入流末尾时，执行 <code>END&#123; commands &#125;</code>  语句块。</li>\n</ul>\n<p><strong>BEGIN 语句块</strong> 在 awk 开始从输入流中读取行 <strong>之前</strong> 被执行，这是一个可选的语句块，比如变量初始化、打印输出表格的表头等语句通常可以写在 BEGIN 语句块中。</p>\n<p><strong>END 语句块</strong> 在 awk 从输入流中读取完所有的行 <strong>之后</strong> 即被执行，比如打印所有行的分析结果这类信息汇总都是在 END 语句块中完成，它也是一个可选语句块。</p>\n<p><strong>pattern 语句块</strong> 中的通用命令是最重要的部分，它也是可选的。如果没有提供 pattern 语句块，则默认执行 <code>&#123; print &#125;</code> ，即打印每一个读取到的行，awk 读取的每一行都会执行该语句块。</p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"A line 1<span class=\"token entity\" title=\"\\n\">\\n</span>A line 2\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123; print \"Start\" &#125; &#123; print &#125; END&#123; print \"End\" &#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Start</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>A line <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>A line <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>End</pre></td></tr></table></figure><p>当使用不带参数的 <code>print</code>  时，它就打印当前行，当 <code>print</code>  的参数是以逗号进行分隔时，打印时则以空格作为定界符。在 awk 的 print 语句块中双引号是被当作拼接符使用，例如：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'&#123; var1=\"v1\"; var2=\"v2\"; var3=\"v3\"; print var1,var2,var3; &#125;'</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>v1 v2 v3</pre></td></tr></table></figure><p>双引号拼接使用：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'&#123; var1=\"v1\"; var2=\"v2\"; var3=\"v3\"; print var1\"=\"var2\"=\"var3; &#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">v1</span><span class=\"token operator\">=</span>v2<span class=\"token operator\">=</span>v3</pre></td></tr></table></figure><p>{ } 类似一个循环体，会对文件中的每一行进行迭代，通常变量初始化语句（如：i=0）以及打印文件头部的语句放入 BEGIN 语句块中，将打印的结果等语句放在 END 语句块中。</p>\n<h2 id=\"awk内置变量预定义变量\"><a class=\"anchor\" href=\"#awk内置变量预定义变量\">#</a> awk 内置变量（预定义变量）</h2>\n<p>说明：[A][N][P][G] 表示第一个支持变量的工具，[A]=awk、[N]=nawk、[P]=POSIXawk、[G]=gawk</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>**<span class=\"token variable\">$n</span>**  当前记录的第n个字段，比如n为1表示第一个字段，n为2表示第二个字段。 </pre></td></tr><tr><td data-num=\"2\"></td><td><pre> **<span class=\"token variable\">$0</span>**  这个变量包含执行过程中当前行的文本内容。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span>  **ARGC**  命令行参数的数目。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>G<span class=\"token punctuation\">]</span>  **ARGIND**  命令行中当前文件的位置（从0开始算）。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span>  **ARGV**  包含命令行参数的数组。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span>G<span class=\"token punctuation\">]</span>  **CONVFMT**  数字转换格式（默认值为%.6g）。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span>P<span class=\"token punctuation\">]</span>  **ENVIRON**  环境变量关联数组。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span>  **ERRNO**  最后一个系统错误的描述。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span>G<span class=\"token punctuation\">]</span>  **FIELDWIDTHS**  字段宽度列表（用空格键分隔）。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>  **FILENAME**  当前输入文件的名。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span>P<span class=\"token punctuation\">]</span>  **FNR**  同NR，但相对于当前文件。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>  **FS**  字段分隔符（默认是任何空格）。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">[</span>G<span class=\"token punctuation\">]</span>  **IGNORECASE**  如果为真，则进行忽略大小写的匹配。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>  **NF**  表示字段数，在执行过程中对应于当前的字段数。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>  **NR**  表示记录数，在执行过程中对应于当前的行号。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>  **OFMT**  数字的输出格式（默认值是%.6g）。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>  **OFS**  输出字段分隔符（默认值是一个空格）。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>  **ORS**  输出记录分隔符（默认值是一个换行符）。</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>  **RS**  记录分隔符（默认是一个换行符）。</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span>  **RSTART**  由match函数所匹配的字符串的第一个位置。</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span>  **RLENGTH**  由match函数所匹配的字符串的长度。</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span>  **SUBSEP**  数组下标分隔符（默认值是34）。</pre></td></tr></table></figure><p>转义序列</p>\n<pre><code>\\\\ \\自身\n\\$ 转义$\n\\t 制表符\n\\b 退格符\n\\r 回车符\n\\n 换行符\n\\c 取消换行\n</code></pre>\n<p><strong>示例</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"line1 f2 f3<span class=\"token entity\" title=\"\\n\">\\n</span>line2 f4 f5<span class=\"token entity\" title=\"\\n\">\\n</span>line3 f6 f7\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'&#123;print \"Line No:\"NR\", No of fields:\"NF, \"$0=\"$0, \"$1=\"$1, \"$2=\"$2, \"$3=\"$3&#125;'</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Line No:1, No of fields:3 <span class=\"token variable\">$0</span><span class=\"token operator\">=</span>line1 f2 f3 <span class=\"token variable\">$1</span><span class=\"token operator\">=</span>line1 <span class=\"token variable\">$2</span><span class=\"token operator\">=</span>f2 <span class=\"token variable\">$3</span><span class=\"token operator\">=</span>f3</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Line No:2, No of fields:3 <span class=\"token variable\">$0</span><span class=\"token operator\">=</span>line2 f4 f5 <span class=\"token variable\">$1</span><span class=\"token operator\">=</span>line2 <span class=\"token variable\">$2</span><span class=\"token operator\">=</span>f4 <span class=\"token variable\">$3</span><span class=\"token operator\">=</span>f5</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Line No:3, No of fields:3 <span class=\"token variable\">$0</span><span class=\"token operator\">=</span>line3 f6 f7 <span class=\"token variable\">$1</span><span class=\"token operator\">=</span>line3 <span class=\"token variable\">$2</span><span class=\"token operator\">=</span>f6 <span class=\"token variable\">$3</span><span class=\"token operator\">=</span>f7</pre></td></tr></table></figure><p>使用 <code>print $NF</code>  可以打印出一行中的最后一个字段，使用 <code>$(NF-1)</code>  则是打印倒数第二个字段，其他以此类推：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"line1 f2 f3<span class=\"token entity\" title=\"\\n\">\\n</span> line2 f4 f5\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'&#123;print $NF&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>f3</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>f5</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"line1 f2 f3<span class=\"token entity\" title=\"\\n\">\\n</span> line2 f4 f5\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'&#123;print $(NF-1)&#125;'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>f2</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>f4</pre></td></tr></table></figure><p>打印每一行的第二和第三个字段：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'&#123; print $2,$3 &#125;'</span> filename</pre></td></tr></table></figure><p>统计文件中的行数：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'END&#123; print NR &#125;'</span> filename</pre></td></tr></table></figure><p>以上命令只使用了 END 语句块，在读入每一行的时，awk 会将 NR 更新为对应的行号，当到达最后一行 NR 的值就是最后一行的行号，所以 END 语句块中的 NR 就是文件的行数。</p>\n<p>一个每一行中第一个字段值累加的例子：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">seq</span> <span class=\"token number\">5</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123; sum=0; print \"总和：\" &#125; &#123; print $1\"+\"; sum+=$1 &#125; END&#123; print \"等于\"; print sum &#125;'</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>总和：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1</span>+</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2</span>+</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3</span>+</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">4</span>+</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">5</span>+</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>等于</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">15</span></pre></td></tr></table></figure><h2 id=\"将外部变量值传递给awk\"><a class=\"anchor\" href=\"#将外部变量值传递给awk\">#</a> 将外部变量值传递给 awk</h2>\n<p>借助 <strong> <code>-v</code>  选项</strong> ，可以将外部值（并非来自 stdin）传递给 awk：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">VAR</span><span class=\"token operator\">=</span><span class=\"token number\">10000</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token parameter variable\">-v</span> <span class=\"token assign-left variable\">VARIABLE</span><span class=\"token operator\">=</span><span class=\"token variable\">$VAR</span> <span class=\"token string\">'&#123; print VARIABLE &#125;'</span></pre></td></tr></table></figure><p>另一种传递外部变量方法：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">var1</span><span class=\"token operator\">=</span><span class=\"token string\">\"aaa\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">var2</span><span class=\"token operator\">=</span><span class=\"token string\">\"bbb\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'&#123; print v1,v2 &#125;'</span> <span class=\"token assign-left variable\">v1</span><span class=\"token operator\">=</span><span class=\"token variable\">$var1</span> <span class=\"token assign-left variable\">v2</span><span class=\"token operator\">=</span><span class=\"token variable\">$var2</span></pre></td></tr></table></figure><p>当输入来自于文件时使用：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'&#123; print v1,v2 &#125;'</span> <span class=\"token assign-left variable\">v1</span><span class=\"token operator\">=</span><span class=\"token variable\">$var1</span> <span class=\"token assign-left variable\">v2</span><span class=\"token operator\">=</span><span class=\"token variable\">$var2</span> filename</pre></td></tr></table></figure><p>以上方法中，变量之间用空格分隔作为 awk 的命令行参数跟随在 BEGIN、{} 和 END 语句块之后。</p>\n<h2 id=\"查找进程pid\"><a class=\"anchor\" href=\"#查找进程pid\">#</a> 查找进程 pid</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">netstat</span> <span class=\"token parameter variable\">-antup</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token number\">7770</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'&#123; print $NF NR&#125;'</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'&#123; print $1&#125;'</span></pre></td></tr></table></figure><h2 id=\"awk运算与判断\"><a class=\"anchor\" href=\"#awk运算与判断\">#</a> awk 运算与判断</h2>\n<p>作为一种程序设计语言所应具有的特点之一，awk 支持多种运算，这些运算与 C 语言提供的基本相同。awk 还提供了一系列内置的运算函数（如 log、sqr、cos、sin 等）和一些用于对字符串进行操作（运算）的函数（如 length、substr 等等）。这些函数的引用大大的提高了 awk 的运算功能。作为对条件转移指令的一部分，关系判断是每种程序设计语言都具备的功能，awk 也不例外，awk 中允许进行多种测试，作为样式匹配，还提供了模式匹配表达式<sub>（匹配）和！</sub>（不匹配）。作为对测试的一种扩充，awk 也支持用逻辑运算符。</p>\n<h3 id=\"算术运算符\"><a class=\"anchor\" href=\"#算术运算符\">#</a> 算术运算符</h3>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+ -</td>\n<td>加，减</td>\n</tr>\n<tr>\n<td>* / &amp;</td>\n<td>乘，除与求余</td>\n</tr>\n<tr>\n<td>+ - !</td>\n<td>一元加，减和逻辑非</td>\n</tr>\n<tr>\n<td>^ ***</td>\n<td>求幂</td>\n</tr>\n<tr>\n<td>++ --</td>\n<td>增加或减少，作为前缀或后缀</td>\n</tr>\n</tbody>\n</table>\n<p>例：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;a=\"b\";print a++,++a;&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token number\">2</span></pre></td></tr></table></figure><p>注意：所有用作算术运算符进行操作，操作数自动转为数值，所有非数值都变为 0</p>\n<h3 id=\"赋值运算符\"><a class=\"anchor\" href=\"#赋值运算符\">#</a> 赋值运算符</h3>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>= += -= *= /= %= ^= **=</td>\n<td>赋值语句</td>\n</tr>\n</tbody>\n</table>\n<p>例：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">a</span><span class=\"token operator\">+=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> 等价于：a<span class=\"token operator\">=</span>a+5<span class=\"token punctuation\">;</span> 其它同类</pre></td></tr></table></figure><h3 id=\"逻辑运算符\"><a class=\"anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符</h3>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>`   |     |</td>\n</tr>\n<tr>\n<td>&amp;&amp;</td>\n<td>逻辑与</td>\n</tr>\n</tbody>\n</table>\n<p>例：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;a=1;b=2;print (a>5 &amp;&amp; b&lt;=2),(a>5 || b&lt;=2);&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><h3 id=\"正则运算符\"><a class=\"anchor\" href=\"#正则运算符\">#</a> 正则运算符</h3>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>~ !~</td>\n<td>匹配正则表达式和不匹配正则表达式</td>\n</tr>\n</tbody>\n</table>\n<pre><code>^ 行首\n$ 行尾\n. 除了换行符以外的任意单个字符\n* 前导字符的零个或多个\n.* 所有字符\n[] 字符组内的任一字符\n[^]对字符组内的每个字符取反(不匹配字符组内的每个字符)\n^[^] 非字符组内的字符开头的行\n[a-z] 小写字母\n[A-Z] 大写字母\n[a-Z] 小写和大写字母\n[0-9] 数字\n\\&lt; 单词头单词一般以空格或特殊字符做分隔,连续的字符串被当做单词\n\\&gt; 单词尾\n</code></pre>\n<blockquote>\n<p>正则需要用 / 正则 / 包围住</p>\n</blockquote>\n<p>例：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;a=\"100testa\";if(a ~ /^100*/)&#123;print \"ok\";&#125;&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ok</pre></td></tr></table></figure><h3 id=\"关系运算符\"><a class=\"anchor\" href=\"#关系运算符\">#</a> 关系运算符</h3>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&lt; &lt;= &gt; &gt;= != ==</td>\n<td>关系运算符</td>\n</tr>\n</tbody>\n</table>\n<p>例：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;a=11;if(a >= 9)&#123;print \"ok\";&#125;&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ok</pre></td></tr></table></figure><p>注意：&gt; &lt; 可以作为字符串比较，也可以用作数值比较，关键看操作数如果是字符串就会转换为字符串比较。两个都为数字才转为数值比较。字符串比较：按照 ASCII 码顺序比较。</p>\n<h3 id=\"其它运算符\"><a class=\"anchor\" href=\"#其它运算符\">#</a> 其它运算符</h3>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$</td>\n<td>字段引用</td>\n</tr>\n<tr>\n<td>空格</td>\n<td>字符串连接符</td>\n</tr>\n<tr>\n<td>?:</td>\n<td>C 条件表达式</td>\n</tr>\n<tr>\n<td>in</td>\n<td>数组中是否存在某键值</td>\n</tr>\n</tbody>\n</table>\n<p>例：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;a=\"b\";print a==\"b\"?\"ok\":\"err\";&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ok</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;a=\"b\";arr[0]=\"b\";arr[1]=\"c\";print (a in arr);&#125;'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;a=\"b\";arr[0]=\"b\";arr[\"b\"]=\"c\";print (a in arr);&#125;'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr></table></figure><h3 id=\"运算级优先级表\"><a class=\"anchor\" href=\"#运算级优先级表\">#</a> 运算级优先级表</h3>\n<p>! 级别越高越优先<br />\n级别越高越优先</p>\n<h2 id=\"awk高级输入输出\"><a class=\"anchor\" href=\"#awk高级输入输出\">#</a> awk 高级输入输出</h2>\n<h3 id=\"读取下一条记录\"><a class=\"anchor\" href=\"#读取下一条记录\">#</a> 读取下一条记录</h3>\n<p>awk 中 <code>next</code>  语句使用：在循环逐行匹配，如果遇到 next，就会跳过当前行，直接忽略下面语句。而进行下一行匹配。next 语句一般用于多行合并：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> text.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>b</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>c</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>d</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>e</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'NR%2==1&#123;next&#125;&#123;print NR,$0;&#125;'</span> text.txt</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">2</span> b</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">4</span> d</pre></td></tr></table></figure><p>当记录行号除以 2 余 1，就跳过当前行。下面的 <code>print NR,$0</code>  也不会执行。下一行开始，程序有开始判断 <code>NR%2</code>  值。这个时候记录行号是 <code>：2</code>  ，就会执行下面语句块： <code>'print NR,$0'</code></p>\n<p>分析发现需要将包含有 “web” 行进行跳过，然后需要将内容与下面行合并为一行：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> text.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>web01<span class=\"token punctuation\">[</span><span class=\"token number\">192.168</span>.2.100<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>httpd            ok</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>tomcat               ok</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sendmail</span>               ok</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>web02<span class=\"token punctuation\">[</span><span class=\"token number\">192.168</span>.2.101<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>httpd            ok</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>postfix               ok</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>web03<span class=\"token punctuation\">[</span><span class=\"token number\">192.168</span>.2.102<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>mysqld            ok</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>httpd               ok</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'/^web/&#123;T=$0;next;&#125;&#123;print T\":\"t,$0;&#125;'</span> text.txt</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>web01<span class=\"token punctuation\">[</span><span class=\"token number\">192.168</span>.2.100<span class=\"token punctuation\">]</span>:   httpd            ok</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>web01<span class=\"token punctuation\">[</span><span class=\"token number\">192.168</span>.2.100<span class=\"token punctuation\">]</span>:   tomcat               ok</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>web01<span class=\"token punctuation\">[</span><span class=\"token number\">192.168</span>.2.100<span class=\"token punctuation\">]</span>:   <span class=\"token function\">sendmail</span>               ok</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>web02<span class=\"token punctuation\">[</span><span class=\"token number\">192.168</span>.2.101<span class=\"token punctuation\">]</span>:   httpd            ok</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>web02<span class=\"token punctuation\">[</span><span class=\"token number\">192.168</span>.2.101<span class=\"token punctuation\">]</span>:   postfix               ok</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>web03<span class=\"token punctuation\">[</span><span class=\"token number\">192.168</span>.2.102<span class=\"token punctuation\">]</span>:   mysqld            ok</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>web03<span class=\"token punctuation\">[</span><span class=\"token number\">192.168</span>.2.102<span class=\"token punctuation\">]</span>:   httpd               ok</pre></td></tr></table></figure><h3 id=\"简单地读取一条记录\"><a class=\"anchor\" href=\"#简单地读取一条记录\">#</a> 简单地读取一条记录</h3>\n<p><code>awk getline</code>  用法：输出重定向需用到 <code>getline函数</code> 。getline 从标准输入、管道或者当前正在处理的文件之外的其他输入文件获得输入。它负责从输入获得下一行的内容，并给 NF,NR 和 FNR 等内建变量赋值。如果得到一条记录，getline 函数返回 1，如果到达文件的末尾就返回 0，如果出现错误，例如打开文件失败，就返回 - 1。</p>\n<p>getline 语法：getline var，变量 var 包含了特定行的内容。</p>\n<p>awk getline 从整体上来说，用法说明：</p>\n<ul>\n<li><strong>当其左右无重定向符 <code>|</code>  或 <code>&lt;</code>  时：</strong> getline 作用于当前文件，读入当前文件的第一行给其后跟的变量 <code>var</code>  或 <code>$0</code> （无变量），应该注意到，由于 awk 在处理 getline 之前已经读入了一行，所以 getline 得到的返回结果是隔行的。</li>\n<li><strong>当其左右有重定向符 <code>|</code>  或 <code>&lt;</code>  时：</strong> getline 则作用于定向输入文件，由于该文件是刚打开，并没有被 awk 读入一行，只是 getline 读入，那么 getline 返回的是该文件的第一行，而不是隔行。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<p>执行 linux 的 <code>date</code>  命令，并通过管道输出给 <code>getline</code> ，然后再把输出赋值给自定义变量 out，并打印它：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123; \"date\" | getline out; print out &#125;'</span> <span class=\"token builtin class-name\">test</span></pre></td></tr></table></figure><p>执行 shell 的 date 命令，并通过管道输出给 getline，然后 getline 从管道中读取并将输入赋值给 out，split 函数把变量 out 转化成数组 mon，然后打印数组 mon 的第二个元素：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123; \"date\" | getline out; split(out,mon); print mon[2] &#125;'</span> <span class=\"token builtin class-name\">test</span></pre></td></tr></table></figure><p>命令 ls 的输出传递给 geline 作为输入，循环使 getline 从 ls 的输出中读取一行，并把它打印到屏幕。这里没有输入文件，因为 BEGIN 块在打开输入文件前执行，所以可以忽略输入文件。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123; while( \"ls\" | getline) print &#125;'</span></pre></td></tr></table></figure><h3 id=\"关闭文件\"><a class=\"anchor\" href=\"#关闭文件\">#</a> 关闭文件</h3>\n<p>awk 中允许在程序中关闭一个输入或输出文件，方法是使用 awk 的 close 语句。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>close<span class=\"token punctuation\">(</span><span class=\"token string\">\"filename\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>filename 可以是 getline 打开的文件，也可以是 stdin，包含文件名的变量或者 getline 使用的确切命令。或一个输出文件，可以是 stdout，包含文件名的变量或使用管道的确切命令。</p>\n<h3 id=\"输出到一个文件\"><a class=\"anchor\" href=\"#输出到一个文件\">#</a> 输出到一个文件</h3>\n<p>awk 中允许用如下方式将结果输出到一个文件：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'&#123;printf(\"hello word!n\") > \"datafile\"&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 或</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'&#123;printf(\"hello word!n\") >> \"datafile\"&#125;'</span></pre></td></tr></table></figure><h2 id=\"设置字段定界符\"><a class=\"anchor\" href=\"#设置字段定界符\">#</a> 设置字段定界符</h2>\n<p>默认的字段定界符是空格，可以使用 <code>-F &quot;定界符&quot;</code>  明确指定一个定界符：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> -F: <span class=\"token string\">'&#123; print $NF &#125;'</span> /etc/passwd</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 或</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123; FS=\":\" &#125; &#123; print $NF &#125;'</span> /etc/passwd</pre></td></tr></table></figure><p>在 <code>BEGIN语句块</code> 中则可以用 <code>OFS=“定界符”</code>  设置输出字段的定界符。</p>\n<h2 id=\"流程控制语句\"><a class=\"anchor\" href=\"#流程控制语句\">#</a> 流程控制语句</h2>\n<p>在 linux awk 的 while、do-while 和 for 语句中允许使用 break,continue 语句来控制流程走向，也允许使用 exit 这样的语句来退出。break 中断当前正在执行的循环并跳到循环外执行下一条语句。if 是流程选择用法。awk 中，流程控制语句，语法结构，与 c 语言类型。有了这些语句，其实很多 shell 程序都可以交给 awk，而且性能是非常快的。下面是各个语句用法。</p>\n<h3 id=\"条件判断语句\"><a class=\"anchor\" href=\"#条件判断语句\">#</a> 条件判断语句</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>if<span class=\"token punctuation\">(</span>表达式<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  语句1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  语句2</pre></td></tr></table></figure><p>格式中语句 1 可以是多个语句，为了方便判断和阅读，最好将多个语句用 {} 括起来。awk 分枝结构允许嵌套，其格式为：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>if<span class=\"token punctuation\">(</span>表达式<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span>语句1<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">else</span> if<span class=\"token punctuation\">(</span>表达式<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span>语句2<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span>语句3<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>示例：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>test=100;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>if(test>90)&#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  print \"very good\";</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  else if(test>60)&#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    print \"good\";</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  else&#123;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    print \"no pass\";</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>&#125;'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>very good</pre></td></tr></table></figure><p>每条命令语句后面可以用 <code>;</code>  <strong>分号</strong> 结尾。</p>\n<h3 id=\"循环语句\"><a class=\"anchor\" href=\"#循环语句\">#</a> 循环语句</h3>\n<h3 id=\"while语句\"><a class=\"anchor\" href=\"#while语句\">#</a> # while 语句</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>while<span class=\"token punctuation\">(</span>表达式<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span>语句<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>示例：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>test=100;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>total=0;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>while(i&lt;=test)&#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  total+=i;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  i++;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>print total;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&#125;'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">5050</span></pre></td></tr></table></figure><h3 id=\"for循环\"><a class=\"anchor\" href=\"#for循环\">#</a> # for 循环</h3>\n<p>for 循环有两种格式：</p>\n<p>格式 1：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>for<span class=\"token punctuation\">(</span>变量 <span class=\"token keyword\">in</span> 数组<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span>语句<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>示例：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>for(k in ENVIRON)&#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  print k\"=\"ENVIRON[k];</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&#125;'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token assign-left variable\"><span class=\"token environment constant\">TERM</span></span><span class=\"token operator\">=</span>linux</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token assign-left variable\">G_BROKEN_FILENAMES</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token assign-left variable\"><span class=\"token environment constant\">SHLVL</span></span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token assign-left variable\">pwd</span><span class=\"token operator\">=</span>/root/text</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token assign-left variable\">logname</span><span class=\"token operator\">=</span>root</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token assign-left variable\"><span class=\"token environment constant\">HOME</span></span><span class=\"token operator\">=</span>/root</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token assign-left variable\">SSH_CLIENT</span><span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.1.21 <span class=\"token number\">53087</span> <span class=\"token number\">22</span></pre></td></tr></table></figure><p>注：ENVIRON 是 awk 常量，是子典型数组。</p>\n<p>格式 2：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>for<span class=\"token punctuation\">(</span>变量<span class=\"token punctuation\">;</span>条件<span class=\"token punctuation\">;</span>表达式<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span>语句<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>示例：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>total=0;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>for(i=0;i&lt;=100;i++)&#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  total+=i;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>print total;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&#125;'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">5050</span></pre></td></tr></table></figure><h3 id=\"do循环\"><a class=\"anchor\" href=\"#do循环\">#</a> # do 循环</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span>语句<span class=\"token punctuation\">&#125;</span> while<span class=\"token punctuation\">(</span>条件<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>例子：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123; </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>total=0;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>i=0;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>do &#123;total+=i;i++;&#125; while(i&lt;=100)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  print total;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&#125;'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">5050</span></pre></td></tr></table></figure><h3 id=\"其他语句\"><a class=\"anchor\" href=\"#其他语句\">#</a> 其他语句</h3>\n<ul>\n<li><strong>break</strong> 当 break 语句用于 while 或 for 语句时，导致退出程序循环。</li>\n<li><strong>continue</strong> 当 continue 语句用于 while 或 for 语句时，使程序循环移动到下一个迭代。</li>\n<li><strong>next</strong> 能能够导致读入下一个输入行，并返回到脚本的顶部。这可以避免对当前输入行执行其他的操作过程。</li>\n<li><strong>exit</strong> 语句使主输入循环退出并将控制转移到 END, 如果 END 存在的话。如果没有定义 END 规则，或在 END 中应用 exit 语句，则终止脚本的执行。</li>\n</ul>\n<h2 id=\"数组应用\"><a class=\"anchor\" href=\"#数组应用\">#</a> 数组应用</h2>\n<p>数组是 awk 的灵魂，处理文本中最不能少的就是它的数组处理。因为数组索引（下标）可以是数字和字符串在 awk 中数组叫做关联数组 (associative arrays)。awk 中的数组不必提前声明，也不必声明大小。数组元素用 0 或空字符串来初始化，这根据上下文而定。</p>\n<h3 id=\"数组的定义\"><a class=\"anchor\" href=\"#数组的定义\">#</a> 数组的定义</h3>\n<p>数字做数组索引（下标）：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Array<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"sun\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Array<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"kai\"</span></pre></td></tr></table></figure><p>字符串做数组索引（下标）：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Array<span class=\"token punctuation\">[</span><span class=\"token string\">\"first\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"www\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Array<span class=\"token string\">\"[last\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"name\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Array<span class=\"token punctuation\">[</span><span class=\"token string\">\"birth\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"1987\"</span></pre></td></tr></table></figure><p>使用中 <code>print Array[1]</code>  会打印出 sun；使用 <code>print Array[2]</code>  会打印出 kai；使用 <code>print[&quot;birth&quot;]</code>  会得到 1987。</p>\n<p><strong>读取数组的值</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span> for<span class=\"token punctuation\">(</span>item <span class=\"token keyword\">in</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>print array<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>       <span class=\"token comment\">#输出的顺序是随机的</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span> for<span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>len<span class=\"token punctuation\">;</span>i++<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>print array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>         <span class=\"token comment\">#Len 是数组的长度</span></pre></td></tr></table></figure><h3 id=\"数组相关函数\"><a class=\"anchor\" href=\"#数组相关函数\">#</a> 数组相关函数</h3>\n<p><strong>得到数组长度：</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;info=\"it is a test\";lens=split(info,tA,\" \");print length(tA),lens;&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">4</span> <span class=\"token number\">4</span></pre></td></tr></table></figure><p>length 返回字符串以及数组长度，split 进行分割字符串为数组，也会返回分割得到数组长度。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;info=\"it is a test\";split(info,tA,\" \");print asort(tA);&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">4</span></pre></td></tr></table></figure><p>asort 对数组进行排序，返回数组长度。</p>\n<p><strong>输出数组内容（无序，有序输出）：</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;info=\"it is a test\";split(info,tA,\" \");for(k in tA)&#123;print k,tA[k];&#125;&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">4</span> <span class=\"token builtin class-name\">test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1</span> it</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2</span> is</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3</span> a</pre></td></tr></table></figure><p><code>for…in</code>  输出，因为数组是关联数组，默认是无序的。所以通过 <code>for…in</code>  得到是无序的数组。如果需要得到有序数组，需要通过下标获得。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;info=\"it is a test\";tlen=split(info,tA,\" \");for(k=1;k&lt;=tlen;k++)&#123;print k,tA[k];&#125;&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span> it</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span> is</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3</span> a</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">4</span> <span class=\"token builtin class-name\">test</span></pre></td></tr></table></figure><p>注意：数组下标是从 1 开始，与 C 数组不一样。</p>\n<p><strong>判断键值存在以及删除键值：</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 错误的判断方法：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;tB[\"a\"]=\"a1\";tB[\"b\"]=\"b1\";if(tB[\"c\"]!=\"1\")&#123;print \"no found\";&#125;;for(k in tB)&#123;print k,tB[k];&#125;&#125;'</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>no found</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a a1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>b b1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>c</pre></td></tr></table></figure><p>以上出现奇怪问题， <code>tB[“c”]</code>  没有定义，但是循环时候，发现已经存在该键值，它的值为空，这里需要注意，awk 数组是关联数组，只要通过数组引用它的 key，就会自动创建改序列。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 正确判断方法：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;tB[\"a\"]=\"a1\";tB[\"b\"]=\"b1\";if( \"c\" in tB)&#123;print \"ok\";&#125;;for(k in tB)&#123;print k,tB[k];&#125;&#125;'</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a a1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>b b1</pre></td></tr></table></figure><p><code>if(key in array)</code>  通过这种方法判断数组中是否包含 <code>key</code>  键值。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#删除键值：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;tB[\"a\"]=\"a1\";tB[\"b\"]=\"b1\";delete tB[\"a\"];for(k in tB)&#123;print k,tB[k];&#125;&#125;'</span>                     </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>b b1</pre></td></tr></table></figure><p><code>delete array[key]</code>  可以删除，对应数组 <code>key</code>  的，序列值。</p>\n<h3 id=\"二维-多维数组使用\"><a class=\"anchor\" href=\"#二维-多维数组使用\">#</a> 二维、多维数组使用</h3>\n<p>awk 的多维数组在本质上是一维数组，更确切一点，awk 在存储上并不支持多维数组。awk 提供了逻辑上模拟二维数组的访问方式。例如， <code>array[2,4]=1</code>  这样的访问是允许的。awk 使用一个特殊的字符串 <code>SUBSEP(�34)</code>  作为分割字段，在上面的例子中，关联数组 array 存储的键值实际上是 2�344。</p>\n<p>类似一维数组的成员测试，多维数组可以使用 <code>if ( (i,j) in array)</code>  这样的语法，但是下标必须放置在圆括号中。类似一维数组的循环访问，多维数组使用 <code>for ( item in array )</code>  这样的语法遍历数组。与一维数组不同的是，多维数组必须使用 <code>split()</code>  函数来访问单独的下标分量。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>for(i=1;i&lt;=9;i++)&#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  for(j=1;j&lt;=9;j++)&#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    tarr[i,j]=i*j; print i,\"*\",j,\"=\",tarr[i,j];</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&#125;'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">1</span> * <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">1</span> * <span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">1</span> * <span class=\"token number\">3</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">1</span> * <span class=\"token number\">4</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">1</span> * <span class=\"token number\">5</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">1</span> * <span class=\"token number\">6</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">9</span> * <span class=\"token number\">6</span> <span class=\"token operator\">=</span> <span class=\"token number\">54</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">9</span> * <span class=\"token number\">7</span> <span class=\"token operator\">=</span> <span class=\"token number\">63</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">9</span> * <span class=\"token number\">8</span> <span class=\"token operator\">=</span> <span class=\"token number\">72</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">9</span> * <span class=\"token number\">9</span> <span class=\"token operator\">=</span> <span class=\"token number\">81</span></pre></td></tr></table></figure><p>可以通过 <code>array[k,k2]</code>  引用获得数组内容。</p>\n<p>另一种方法：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>for(i=1;i&lt;=9;i++)&#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  for(j=1;j&lt;=9;j++)&#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    tarr[i,j]=i*j;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>for(m in tarr)&#123;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  split(m,tarr2,SUBSEP); print tarr2[1],\"*\",tarr2[2],\"=\",tarr[m];</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>&#125;'</span></pre></td></tr></table></figure><h2 id=\"内置函数\"><a class=\"anchor\" href=\"#内置函数\">#</a> 内置函数</h2>\n<p>awk 内置函数，主要分以下 3 种类似：算数函数、字符串函数、其它一般函数、时间函数。</p>\n<h3 id=\"算术函数\"><a class=\"anchor\" href=\"#算术函数\">#</a> 算术函数</h3>\n<table>\n<thead>\n<tr>\n<th>格式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>atan2( y, x )</td>\n<td>返回 y/x 的反正切。</td>\n</tr>\n<tr>\n<td>cos( x )</td>\n<td>返回 x 的余弦；x 是弧度。</td>\n</tr>\n<tr>\n<td>sin( x )</td>\n<td>返回 x 的正弦；x 是弧度。</td>\n</tr>\n<tr>\n<td>exp( x )</td>\n<td>返回 x 幂函数。</td>\n</tr>\n<tr>\n<td>log( x )</td>\n<td>返回 x 的自然对数。</td>\n</tr>\n<tr>\n<td>sqrt( x )</td>\n<td>返回 x 平方根。</td>\n</tr>\n<tr>\n<td>int( x )</td>\n<td>返回 x 的截断至整数的值。</td>\n</tr>\n<tr>\n<td>rand( )</td>\n<td>返回任意数字 n，其中 0 &lt;= n &lt; 1。</td>\n</tr>\n<tr>\n<td>srand( [expr] )</td>\n<td>将 rand 函数的种子值设置为 Expr 参数的值，或如果省略 Expr 参数则使用某天的时间。返回先前的种子值。</td>\n</tr>\n</tbody>\n</table>\n<p>举例说明：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;OFMT=\"%.3f\";fs=sin(1);fe=exp(10);fl=log(10);fi=int(3.1415);print fs,fe,fl,fi;&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">0.841</span> <span class=\"token number\">22026.466</span> <span class=\"token number\">2.303</span> <span class=\"token number\">3</span></pre></td></tr></table></figure><p>OFMT 设置输出数据格式是保留 3 位小数。</p>\n<p>获得随机数：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;srand();fr=int(100*rand());print fr;&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">78</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;srand();fr=int(100*rand());print fr;&#125;'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">31</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;srand();fr=int(100*rand());print fr;&#125;'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">41</span></pre></td></tr></table></figure><h3 id=\"字符串函数\"><a class=\"anchor\" href=\"#字符串函数\">#</a> 字符串函数</h3>\n<table>\n<thead>\n<tr>\n<th>格式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gsub( Ere, Repl, [ In ] )</td>\n<td>除了正则表达式所有具体值被替代这点，它和 sub 函数完全一样地执行。</td>\n</tr>\n<tr>\n<td>sub( Ere, Repl, [ In ] )</td>\n<td>用 Repl 参数指定的字符串替换 In 参数指定的字符串中的由 Ere 参数指定的扩展正则表达式的第一个具体值。sub 函数返回替换的数量。出现在 Repl 参数指定的字符串中的 &amp;（和符号）由 In 参数指定的与 Ere 参数的指定的扩展正则表达式匹配的字符串替换。如果未指定 In 参数，缺省值是整个记录（$0 记录变量）。</td>\n</tr>\n<tr>\n<td>index( String1, String2 )</td>\n<td>在由 String1 参数指定的字符串（其中有出现 String2 指定的参数）中，返回位置，从 1 开始编号。如果 String2 参数不在 String1 参数中出现，则返回 0（零）。</td>\n</tr>\n<tr>\n<td>length [(String)]</td>\n<td>返回 String 参数指定的字符串的长度（字符形式）。如果未给出 String 参数，则返回整个记录的长度（$0 记录变量）。</td>\n</tr>\n<tr>\n<td>blength [(String)]</td>\n<td>返回 String 参数指定的字符串的长度（以字节为单位）。如果未给出 String 参数，则返回整个记录的长度（$0 记录变量）。</td>\n</tr>\n<tr>\n<td>substr( String, M, [ N ] )</td>\n<td>返回具有 N 参数指定的字符数量子串。子串从 String 参数指定的字符串取得，其字符以 M 参数指定的位置开始。M 参数指定为将 String 参数中的第一个字符作为编号 1。如果未指定 N 参数，则子串的长度将是 M 参数指定的位置到 String 参数的末尾 的长度。</td>\n</tr>\n<tr>\n<td>match( String, Ere )</td>\n<td>在 String 参数指定的字符串（Ere 参数指定的扩展正则表达式出现在其中）中返回位置（字符形式），从 1 开始编号，或如果 Ere 参数不出现，则返回 0（零）。RSTART 特殊变量设置为返回值。RLENGTH 特殊变量设置为匹配的字符串的长度，或如果未找到任何匹配，则设置为 -1（负一）。</td>\n</tr>\n<tr>\n<td>split( String, A, [Ere] )</td>\n<td>将 String 参数指定的参数分割为数组元素 A [1], A [2], . . ., A [n]，并返回 n 变量的值。此分隔可以通过 Ere 参数指定的扩展正则表达式进行，或用当前字段分隔符（FS 特殊变量）来进行（如果没有给出 Ere 参数）。除非上下文指明特定的元素还应具有一个数字值，否则 A 数组中的元素用字符串值来创建。</td>\n</tr>\n<tr>\n<td>tolower( String )</td>\n<td>返回 String 参数指定的字符串，字符串中每个大写字符将更改为小写。大写和小写的映射由当前语言环境的 LC_CTYPE 范畴定义。</td>\n</tr>\n<tr>\n<td>toupper( String )</td>\n<td>返回 String 参数指定的字符串，字符串中每个小写字符将更改为大写。大写和小写的映射由当前语言环境的 LC_CTYPE 范畴定义。</td>\n</tr>\n<tr>\n<td>sprintf(Format, Expr, Expr, . . . )</td>\n<td>根据 Format 参数指定的 printf 子例程格式字符串来格式化 Expr 参数指定的表达式并返回最后生成的字符串。</td>\n</tr>\n</tbody>\n</table>\n<p>注：Ere 都可以是正则表达式。</p>\n<p><strong>gsub,sub 使用</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;info=\"this is a test2010test!\";gsub(/[0-9]+/,\"!\",info);print info&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>this is a test<span class=\"token operator\">!</span>test<span class=\"token operator\">!</span></pre></td></tr></table></figure><p>在 info 中查找满足正则表达式， <code>/[0-9]+/</code>  用 <code>””</code>  替换，并且替换后的值，赋值给 info 未给 info 值，默认是 <code>$0</code></p>\n<p><strong>查找字符串（index 使用）</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;info=\"this is a test2010test!\";print index(info,\"test\")?\"ok\":\"no found\";&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ok</pre></td></tr></table></figure><p>未找到，返回 0</p>\n<p><strong>正则表达式匹配查找 (match 使用）</strong></p>\n<pre><code>awk 'BEGIN&#123;info=&quot;this is a test2010test!&quot;;print match(info,/[0-9]+/)?&quot;ok&quot;:&quot;no found&quot;;&#125;'\nok\n</code></pre>\n<p><strong>截取字符串 (substr 使用）</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>wangsl@centos5 ~<span class=\"token punctuation\">]</span>$ <span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;info=\"this is a test2010test!\";print substr(info,4,10);&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>s is a tes</pre></td></tr></table></figure><p>从第 4 个 字符开始，截取 10 个长度字符串</p>\n<p><strong>字符串分割（split 使用）</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;info=\"this is a test\";split(info,tA,\" \");print length(tA);for(k in tA)&#123;print k,tA[k];&#125;&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">4</span> <span class=\"token builtin class-name\">test</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">1</span> this</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">2</span> is</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">3</span> a</pre></td></tr></table></figure><p>分割 info，动态创建数组 tA，这里比较有意思， <code>awk for …in</code>  循环，是一个无序的循环。 并不是从数组下标 1…n ，因此使用时候需要注意。</p>\n<p><strong>格式化字符串输出（sprintf 使用）</strong></p>\n<p>格式化字符串格式：</p>\n<p>其中格式化字符串包括两部分内容：一部分是正常字符，这些字符将按原样输出；另一部分是格式化规定字符，以 <code>&quot;%&quot;</code>  开始，后跟一个或几个规定字符，用来确定输出内容格式。</p>\n<table>\n<thead>\n<tr>\n<th>格式</th>\n<th>描述</th>\n<th>格式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%d</td>\n<td>十进制有符号整数</td>\n<td>%u</td>\n<td>十进制无符号整数</td>\n</tr>\n<tr>\n<td>%f</td>\n<td>浮点数</td>\n<td>%s</td>\n<td>字符串</td>\n</tr>\n<tr>\n<td>%c</td>\n<td>单个字符</td>\n<td>%p</td>\n<td>指针的值</td>\n</tr>\n<tr>\n<td>%e</td>\n<td>指数形式的浮点数</td>\n<td>%x</td>\n<td>% X 无符号以十六进制表示的整数</td>\n</tr>\n<tr>\n<td>%o</td>\n<td>无符号以八进制表示的整数</td>\n<td>%g</td>\n<td>自动选择合适的表示法</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;n1=124.113;n2=-1.224;n3=1.2345; printf(\"%.2f,%.2u,%.2g,%X,%on\",n1,n2,n3,n1,n1);&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">124.11</span>,18446744073709551615,1.2,7C,174</pre></td></tr></table></figure><h3 id=\"一般函数\"><a class=\"anchor\" href=\"#一般函数\">#</a> 一般函数</h3>\n<table>\n<thead>\n<tr>\n<th>格式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>close( Expression )</td>\n<td>用同一个带字符串值的 Expression 参数来关闭由 print 或 printf 语句打开的或调用 getline 函数打开的文件或管道。如果文件或管道成功关闭，则返回 0；其它情况下返回非零值。如果打算写一个文件，并稍后在同一个程序中读取文件，则 close 语句是必需的。</td>\n</tr>\n<tr>\n<td>system(command )</td>\n<td>执行 Command 参数指定的命令，并返回退出状态。等同于 system 子例程。</td>\n</tr>\n<tr>\n<td>Expression  <code>                     |</code>  getline [ Variable ]</td>\n</tr>\n<tr>\n<td>getline [ Variable ] &lt; Expression</td>\n<td>从 Expression 参数指定的文件读取输入的下一个记录，并将 Variable 参数指定的变量设置为该记录的值。只要流保留打开且 Expression 参数对同一个字符串求值，则对 getline 函数的每次后续调用读取另一个记录。如果未指定 Variable 参数，则 $0 记录变量和 NF 特殊变量设置为从流读取的记录。</td>\n</tr>\n<tr>\n<td>getline [ Variable ]</td>\n<td>将 Variable 参数指定的变量设置为从当前输入文件读取的下一个输入记录。如果未指定 Variable 参数，则 $0 记录变量设置为该记录的值，还将设置 NF、NR 和 FNR 特殊变量。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>打开外部文件（close 用法）</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;while(\"cat /etc/passwd\"|getline)&#123;print $0;&#125;;close(\"/etc/passwd\");&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>root:x:0:0:root:/root:/bin/bash</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>bin:x:1:1:bin:/bin:/sbin/nologin</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>daemon:x:2:2:daemon:/sbin:/sbin/nologin</pre></td></tr></table></figure><p><strong>逐行读取外部文件 (getline 使用方法）</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;while(getline &lt; \"/etc/passwd\")&#123;print $0;&#125;;close(\"/etc/passwd\");&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>root:x:0:0:root:/root:/bin/bash</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>bin:x:1:1:bin:/bin:/sbin/nologin</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>daemon:x:2:2:daemon:/sbin:/sbin/nologin</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;print \"Enter your name:\";getline name;print name;&#125;'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Enter your name:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>chengmo</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>chengmo</pre></td></tr></table></figure><p><strong>调用外部应用程序 (system 使用方法）</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;b=system(\"ls -al\");print b;&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>total <span class=\"token number\">42092</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>drwxr-xr-x <span class=\"token number\">14</span> chengmo chengmo     <span class=\"token number\">4096</span> 09-30 <span class=\"token number\">17</span>:47 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>drwxr-xr-x <span class=\"token number\">95</span> root   root       <span class=\"token number\">4096</span> <span class=\"token number\">10</span>-08 <span class=\"token number\">14</span>:01 <span class=\"token punctuation\">..</span></pre></td></tr></table></figure><p>b 返回值，是执行结果。</p>\n<h3 id=\"时间函数\"><a class=\"anchor\" href=\"#时间函数\">#</a> 时间函数</h3>\n<table>\n<thead>\n<tr>\n<th>格式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>函数名</td>\n<td>说明</td>\n</tr>\n<tr>\n<td>mktime( YYYY MM dd HH MM ss[ DST])</td>\n<td>生成时间格式</td>\n</tr>\n<tr>\n<td>strftime([format [, timestamp]])</td>\n<td>格式化时间输出，将时间戳转为时间字符串具体格式，见下表。</td>\n</tr>\n<tr>\n<td>systime()</td>\n<td>得到时间戳，返回从 1970 年 1 月 1 日开始到当前时间 (不计闰年) 的整秒数</td>\n</tr>\n</tbody>\n</table>\n<p><strong>建指定时间 (mktime 使用）</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;tstamp=mktime(\"2001 01 01 12 12 12\");print strftime(\"%c\",tstamp);&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2001</span>年01月01日 星期一 <span class=\"token number\">12</span>时12分12秒</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;tstamp1=mktime(\"2001 01 01 12 12 12\");tstamp2=mktime(\"2001 02 01 0 0 0\");print tstamp2-tstamp1;&#125;'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2634468</span></pre></td></tr></table></figure><p>求 2 个时间段中间时间差，介绍了 strftime 使用方法</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;tstamp1=mktime(\"2001 01 01 12 12 12\");tstamp2=systime();print tstamp2-tstamp1;&#125;'</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">308201392</span></pre></td></tr></table></figure><p><strong>strftime 日期和时间格式说明符</strong></p>\n<table>\n<thead>\n<tr>\n<th>格式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%a</td>\n<td>星期几的缩写 (Sun)</td>\n</tr>\n<tr>\n<td>%A</td>\n<td>星期几的完整写法 (Sunday)</td>\n</tr>\n<tr>\n<td>%b</td>\n<td>月名的缩写 (Oct)</td>\n</tr>\n<tr>\n<td>%B</td>\n<td>月名的完整写法 (October)</td>\n</tr>\n<tr>\n<td>%c</td>\n<td>本地日期和时间</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>十进制日期</td>\n</tr>\n<tr>\n<td>%D</td>\n<td>日期 08/20/99</td>\n</tr>\n<tr>\n<td>%e</td>\n<td>日期，如果只有一位会补上一个空格</td>\n</tr>\n<tr>\n<td>%H</td>\n<td>用十进制表示 24 小时格式的小时</td>\n</tr>\n<tr>\n<td>%I</td>\n<td>用十进制表示 12 小时格式的小时</td>\n</tr>\n<tr>\n<td>%j</td>\n<td>从 1 月 1 日起一年中的第几天</td>\n</tr>\n<tr>\n<td>%m</td>\n<td>十进制表示的月份</td>\n</tr>\n<tr>\n<td>%M</td>\n<td>十进制表示的分钟</td>\n</tr>\n<tr>\n<td>%p</td>\n<td>12 小时表示法 (AM/PM)</td>\n</tr>\n<tr>\n<td>%S</td>\n<td>十进制表示的秒</td>\n</tr>\n<tr>\n<td>%U</td>\n<td>十进制表示的一年中的第几个星期 (星期天作为一个星期的开始)</td>\n</tr>\n<tr>\n<td>%w</td>\n<td>十进制表示的星期几 (星期天是 0)</td>\n</tr>\n<tr>\n<td>%W</td>\n<td>十进制表示的一年中的第几个星期 (星期一作为一个星期的开始)</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>重新设置本地日期 (08/20/99)</td>\n</tr>\n<tr>\n<td>%X</td>\n<td>重新设置本地时间 (12:00:00)</td>\n</tr>\n<tr>\n<td>%y</td>\n<td>两位数字表示的年 (99)</td>\n</tr>\n<tr>\n<td>%Y</td>\n<td>当前月份</td>\n</tr>\n<tr>\n<td>%%</td>\n<td>百分号 (%)</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "Linux",
                "RHEL",
                "awk"
            ]
        },
        {
            "id": "https://jove-2761781.github.io/hexo_blog/linux/rhel/systemd/creating%20custom%20unit%20files/",
            "url": "https://jove-2761781.github.io/hexo_blog/linux/rhel/systemd/creating%20custom%20unit%20files/",
            "title": "Creating Custom Unit Files",
            "date_published": "2023-02-06T15:47:00.531Z",
            "content_html": "<h1 id=\"creating-custom-unit-files\"><a class=\"anchor\" href=\"#creating-custom-unit-files\">#</a> Creating Custom Unit Files</h1>\n<ol>\n<li>\n<p>Prepare the executable file with the custom service. This can be a custom-created script, or an executable delivered by a software provider. If required, prepare a PID file to hold a constant PID for the main process of the custom service. It is also possible to include environment files to store shell variables for the service. Make sure the source script is executable (by executing the <strong>chmod a+x</strong>) and is not interactive.</p>\n</li>\n<li>\n<p>Create a unit file in the /etc/systemd/system/ directory and make sure it has correct file permissions. Execute as root:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">touch</span> /etc/systemd/system/name.service</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">chmod</span> <span class=\"token number\">664</span> /etc/systemd/system/name.service</pre></td></tr></table></figure><p>Replace name with a name of the service to be created. Note that file does not need to be executable.</p>\n</li>\n<li>\n<p>Open the name.service file created in the previous step, and add the service configuration options. There is a variety of options that can be used depending on the type of service you wish to create, The following is an example unit configuration for a network-related service:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>Unit<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">Description</span><span class=\"token operator\">=</span>service_description</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">After</span><span class=\"token operator\">=</span>network.target</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>Service<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">ExecStart</span><span class=\"token operator\">=</span>path_to_executable</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token assign-left variable\">Type</span><span class=\"token operator\">=</span>forking</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token assign-left variable\">PIDFile</span><span class=\"token operator\">=</span>path_to_pidfile</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span>Install<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token assign-left variable\">WantedBy</span><span class=\"token operator\">=</span>default.target</pre></td></tr></table></figure><p>Where:</p>\n<ul>\n<li><em>service_description</em> is an informative description that is displayed in journal log files and in the output of the <strong>systemctl status</strong> command.</li>\n<li>the <strong>After</strong> setting ensures that the service is started only after the network is running. Add a space-separated list of other relevant services or targets.</li>\n<li><em>path_to_executable</em> stands for the path to the actual service executable.</li>\n<li><strong>WantedBy</strong> states the target or targets that the service should be started under. Think of these targets as of a replacement of the older concept of runlevels.</li>\n<li><strong>Type=forking</strong> is used for daemons that make the fork system call. The main process of the service is created with - the PID specified in path_to_pidfile.</li>\n</ul>\n</li>\n<li>\n<p>Notify systemd that a new name.service file exists by executing the following command as root:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl daemon-reload</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>systemctl start name.service</pre></td></tr></table></figure></li>\n</ol>\n<div class=\"note warning\">\n<p>Always run the systemctl daemon-reload command after creating new unit files or modifying existing unit files. Otherwise, the systemctl start or systemctl enable commands could fail due to a mismatch between states<br />\nof systemd and actual service unit files on disk.&lt;/font&gt;</p>\n</div>\n",
            "tags": [
                "Linux",
                "RHEL",
                "systemd"
            ]
        },
        {
            "id": "https://jove-2761781.github.io/hexo_blog/linux/rhel/pxe/pxe%20for%20uefi/",
            "url": "https://jove-2761781.github.io/hexo_blog/linux/rhel/pxe/pxe%20for%20uefi/",
            "title": "PXE for UEFI",
            "date_published": "2023-02-06T15:47:00.527Z",
            "content_html": "<h1 id=\"pxe-for-uefi\"><a class=\"anchor\" href=\"#pxe-for-uefi\">#</a> PXE for UEFI</h1>\n<p>为使用 UEFI 的 AMD64 和 Intel 64 客户端配置 PXE 服务器</p>\n<ol>\n<li>\n<p>安装 tftp 软件包。请作为 root 运行以下命令完成此步骤：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># yum install tftp-server</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 /etc/xinet.d/tftp 配置文件中，将 disabled 参数从 yes 改为 no。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim /etc/xinetd.d/tftp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># default: off</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># description: The tftp server serves files using the trivial file transfer \\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#       protocol.  The tftp protocol is often used to boot diskless \\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#       workstations, download configuration files to network-aware printers, \\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#       and to start the installation process for some operating systems.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">service</span> tftp</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        socket_type             <span class=\"token operator\">=</span> dgram</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        protocol                <span class=\"token operator\">=</span> udp</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">wait</span>                    <span class=\"token operator\">=</span> <span class=\"token function\">yes</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        user                    <span class=\"token operator\">=</span> root</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        server                  <span class=\"token operator\">=</span> /usr/sbin/in.tftpd</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        server_args             <span class=\"token operator\">=</span> <span class=\"token parameter variable\">-s</span> /var/lib/tftpboot</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        disable                 <span class=\"token operator\">=</span> no</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        per_source              <span class=\"token operator\">=</span> <span class=\"token number\">11</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        cps                     <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        flags                   <span class=\"token operator\">=</span> IPv4</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个配置文件中还有其他控制 tftp 服务器行为的选项。可用选项请查看 xinetd.conf (5) 手册页。</p>\n</li>\n<li>\n<p>在防火墙中允许 tftp 服务的进入连接：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># firewall-cmd --add-service=tftp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># firewall-cmd --add-service=tftp --permanent</span></pre></td></tr></table></figure></li>\n<li>\n<p>安装配置 DHCP 服务器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># yum install dhcp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim /etc/dhcp/dhcpd.conf</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># DHCP Server Configuration file.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#   see /usr/share/doc/dhcp*/dhcpd.conf.example</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#   see dhcpd.conf(5) man page</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>option space pxelinux<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>option pxelinux.magic code <span class=\"token number\">208</span> <span class=\"token operator\">=</span> string<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>option pxelinux.configfile code <span class=\"token number\">209</span> <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>option pxelinux.pathprefix code <span class=\"token number\">210</span> <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>option pxelinux.reboottime code <span class=\"token number\">211</span> <span class=\"token operator\">=</span> unsigned integer <span class=\"token number\">32</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>option architecture-type code <span class=\"token number\">93</span> <span class=\"token operator\">=</span> unsigned integer <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>subnet <span class=\"token number\">192.168</span>.184.0 netmask <span class=\"token number\">255.255</span>.255.0 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  option routers <span class=\"token number\">192.168</span>.184.254<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  range <span class=\"token number\">192.168</span>.184.2 <span class=\"token number\">192.168</span>.184.253<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  class <span class=\"token string\">\"pxeclients\"</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    match <span class=\"token keyword\">if</span> substring <span class=\"token punctuation\">(</span>option vendor-class-identifier, <span class=\"token number\">0</span>, <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"PXEClient\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    next-server <span class=\"token number\">192.168</span>.184.129<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> option architecture-type <span class=\"token operator\">=</span> 00:07 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      filename <span class=\"token string\">\"uefi/shim.efi\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      filename <span class=\"token string\">\"pxelinux/pxelinux.0\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>现在您需要 shim 软件包中的 shim.efi 文件，以及 ISO 映像文件中 grub2-efi 软件包的 grubx64.efi 文件。要访问该文件，请作为 root 运行以下命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># mount -t iso9660 /path_to_image/name_of_image.iso /mount_point -o loop,ro</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cp -pr /mount_point/Packages/shim-version-architecture.rpm /publicly_available_directory</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cp -pr /mount_point/Packages/grub2-efi-version-architecture.rpm /publicly_available_directory</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># umount /mount_point</span></pre></td></tr></table></figure><p>提取软件包：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># rpm2cpio shim-version-architecture.rpm | cpio -dimv</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># rpm2cpio grub2-efi-version-architecture.rpm | cpio -dimv</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 tftpboot/ 目录中为 EFI 引导映像创建名为 uefi/ 的目录，并从您的 boot 目录复制它们：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># mkdir /var/lib/tftpboot/uefi</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cp publicly_available_directory/boot/efi/EFI/redhat/shim.efi /var/lib/tftpboot/uefi/</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cp publicly_available_directory/boot/efi/EFI/redhat/grubx64.efi /var/lib/tftpboot/uefi/</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 uefi/ 目录中添加名为 grub.cfg 的配置文件。 <code>/var/lib/tftpboot/uefi/grub.cfg</code>  配置文件示例类似如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">timeout</span><span class=\"token operator\">=</span><span class=\"token number\">60</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>menuentry <span class=\"token string\">'RHEL 7'</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  linuxefi uefi/vmlinuz <span class=\"token assign-left variable\">ip</span><span class=\"token operator\">=</span>dhcp <span class=\"token assign-left variable\">inst.repo</span><span class=\"token operator\">=</span>http://192.168.184.129/mnt/archive/RHEL-7/7.1/Server/x86_64/os/</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  initrdefi uefi/initrd.img</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>将引导映像复制到您的 uefi/ 目录下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\">#  cp /path/to/x86_64/os/images/pxeboot/&#123;vmlinuz,initrd.img&#125; /var/lib/tftpboot/uefi/</span></pre></td></tr></table></figure></li>\n<li>\n<p>最后，如果没有运行 xinetd 和 dhcp 服务，则需要启动该服务；如果该服务已运行，则需重新载入 tftp、xinetd 和 dhcp。</p>\n<p>如果这些服务之前没有运行，则需启动这些服务：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># systemctl start xinetd.service dhcpd.service</span></pre></td></tr></table></figure><p>如果要永久启用这些服务以便每次系统重启后自动启动，则还需要执行以下命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># systemctl enable xinetd.service dhcpd.service</span></pre></td></tr></table></figure><p>要重新载入已运行服务的配置，请使用  <code>systemctl reload</code>  命令。</p>\n</li>\n</ol>\n",
            "tags": [
                "Linux",
                "RHEL",
                "pxe"
            ]
        },
        {
            "id": "https://jove-2761781.github.io/hexo_blog/linux/rhel/pxe/pxe%20for%20bios/",
            "url": "https://jove-2761781.github.io/hexo_blog/linux/rhel/pxe/pxe%20for%20bios/",
            "title": "PXE for BIOS",
            "date_published": "2023-02-06T15:47:00.526Z",
            "content_html": "<h1 id=\"pxe-for-bios\"><a class=\"anchor\" href=\"#pxe-for-bios\">#</a> PXE for BIOS</h1>\n<p>为使用 BIOS 的 AMD64 和 Intel 64 客户端配置 PXE 服务器</p>\n<ol>\n<li>\n<p>安装 tftp 软件包。请作为 root 运行以下命令完成此步骤：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># yum install tftp-server</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 /etc/xinet.d/tftp 配置文件中，将 disabled 参数从 yes 改为 no。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim /etc/xinetd.d/tftp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># default: off</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># description: The tftp server serves files using the trivial file transfer \\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#       protocol.  The tftp protocol is often used to boot diskless \\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#       workstations, download configuration files to network-aware printers, \\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#       and to start the installation process for some operating systems.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">service</span> tftp</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        socket_type             <span class=\"token operator\">=</span> dgram</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        protocol                <span class=\"token operator\">=</span> udp</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">wait</span>                    <span class=\"token operator\">=</span> <span class=\"token function\">yes</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        user                    <span class=\"token operator\">=</span> root</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        server                  <span class=\"token operator\">=</span> /usr/sbin/in.tftpd</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        server_args             <span class=\"token operator\">=</span> <span class=\"token parameter variable\">-s</span> /var/lib/tftpboot</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        disable                 <span class=\"token operator\">=</span> no</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        per_source              <span class=\"token operator\">=</span> <span class=\"token number\">11</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        cps                     <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        flags                   <span class=\"token operator\">=</span> IPv4</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个配置文件中还有其他控制 tftp 服务器行为的选项。可用选项请查看 xinetd.conf (5) 手册页。</p>\n</li>\n<li>\n<p>在防火墙中允许 tftp 服务的进入连接：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># firewall-cmd --add-service=tftp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># firewall-cmd --add-service=tftp --permanent</span></pre></td></tr></table></figure></li>\n<li>\n<p>安装配置 DHCP 服务器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># yum install dhcp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim /etc/dhcp/dhcpd.conf</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># DHCP Server Configuration file.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#   see /usr/share/doc/dhcp*/dhcpd.conf.example</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#   see dhcpd.conf(5) man page</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>option space pxelinux<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>option pxelinux.magic code <span class=\"token number\">208</span> <span class=\"token operator\">=</span> string<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>option pxelinux.configfile code <span class=\"token number\">209</span> <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>option pxelinux.pathprefix code <span class=\"token number\">210</span> <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>option pxelinux.reboottime code <span class=\"token number\">211</span> <span class=\"token operator\">=</span> unsigned integer <span class=\"token number\">32</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>option architecture-type code <span class=\"token number\">93</span> <span class=\"token operator\">=</span> unsigned integer <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>subnet <span class=\"token number\">192.168</span>.184.0 netmask <span class=\"token number\">255.255</span>.255.0 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  option routers <span class=\"token number\">192.168</span>.184.254<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  range <span class=\"token number\">192.168</span>.184.2 <span class=\"token number\">192.168</span>.184.253<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  class <span class=\"token string\">\"pxeclients\"</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    match <span class=\"token keyword\">if</span> substring <span class=\"token punctuation\">(</span>option vendor-class-identifier, <span class=\"token number\">0</span>, <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"PXEClient\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    next-server <span class=\"token number\">192.168</span>.184.129<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> option architecture-type <span class=\"token operator\">=</span> 00:07 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      filename <span class=\"token string\">\"uefi/shim.efi\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      filename <span class=\"token string\">\"pxelinux/pxelinux.0\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>现在需要完整安装 DVD 的 ISO 映像文件中 SYSLINUX 软件包中的 pxelinux.0 文件。要访问该文件，请作为 root 运行以下命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># mount -t iso9660 /path_to_image/name_of_image.iso /mount_point -o loop,ro</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cp -pr /mount_point/Packages/syslinux-version-architecture.rpm /publicly_available_directory</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># umount /mount_point</span></pre></td></tr></table></figure><p>提取软件包：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># rpm2cpio syslinux-version-architecture.rpm | cpio -dimv</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 tftpboot 中创建 pxelinux 目录，并将 pxelinux.0 复制到该目录中：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># mkdir /var/lib/tftpboot/pxelinux</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cp publicly_available_directory/usr/share/syslinux/pxelinux.0 /var/lib/tftpboot/pxelinux</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 pxelinux/ 目录中创建目录 pxelinux.cfg/：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># mkdir /var/lib/tftpboot/pxelinux/pxelinux.cfg</span></pre></td></tr></table></figure><p>在 pxelinux.cfg/ 目录中添加名为 default 的配置文件。<br />\n <code>/var/lib/tftpboot/pxelinux/pxelinux.cfg/default</code>  中的示例配置文件类似如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>default vesamenu.c32</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>prompt <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">timeout</span> <span class=\"token number\">600</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>display boot.msg</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>label linux</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  menu label ^Install system</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  menu default</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  kernel vmlinuz</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  append <span class=\"token assign-left variable\">initrd</span><span class=\"token operator\">=</span>initrd.img <span class=\"token assign-left variable\">ip</span><span class=\"token operator\">=</span>dhcp <span class=\"token assign-left variable\">inst.repo</span><span class=\"token operator\">=</span>http://192.168.184.129/mnt/archive/RHEL-7/7.x/Server/x86_64/os/</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>label vesa</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  menu label Install system with ^basic video driver</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  kernel vmlinuz</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  append <span class=\"token assign-left variable\">initrd</span><span class=\"token operator\">=</span>initrd.img <span class=\"token assign-left variable\">ip</span><span class=\"token operator\">=</span>dhcp <span class=\"token assign-left variable\">inst.xdriver</span><span class=\"token operator\">=</span>vesa nomodeset <span class=\"token assign-left variable\">inst.repo</span><span class=\"token operator\">=</span>http://192.168.184.129/mnt/archive/RHEL-7/7.x/Server/x86_64/os/</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>label rescue</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  menu label ^Rescue installed system</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  kernel vmlinuz</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  append <span class=\"token assign-left variable\">initrd</span><span class=\"token operator\">=</span>initrd.img rescue</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>label <span class=\"token builtin class-name\">local</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  menu label Boot from ^local drive</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  localboot 0xffff</pre></td></tr></table></figure></li>\n<li>\n<p>将引导映象复制到您的 tftp/root 目录中：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cp /path/to/x86_64/os/images/pxeboot/&#123;vmlinuz,initrd.img&#125; /var/lib/tftpboot/pxelinux/</span></pre></td></tr></table></figure></li>\n<li>\n<p>最后，如果没有运行 xinetd 和 dhcp 服务，则需要启动该服务；如果该服务已运行，则需重新载入 tftp、xinetd 和 dhcp。</p>\n<p>如果这些服务之前没有运行，则需启动这些服务：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># systemctl start xinetd.service dhcpd.service</span></pre></td></tr></table></figure><p>如果要永久启用这些服务以便每次系统重启后自动启动，则还需要执行以下命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@rhel-7 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># systemctl enable xinetd.service dhcpd.service</span></pre></td></tr></table></figure><p>要重新载入已运行服务的配置，请使用  <code>systemctl reload</code>  命令。</p>\n</li>\n</ol>\n",
            "tags": [
                "Linux",
                "RHEL",
                "pxe"
            ]
        }
    ]
}